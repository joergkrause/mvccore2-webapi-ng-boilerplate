{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.module.ts","webpack:///src/app/components/dashboard/dashboard.component.ts","webpack:///src/app/components/dashboard/dashboard.component.html","webpack:///src/app/components/index.ts","webpack:///src/app/components/info/site-info.component.ts","webpack:///src/app/components/info/site-info.component.html","webpack:///src/app/components/login/login-form.component.html","webpack:///src/app/components/login/login-form.component.ts","webpack:///src/app/components/logout/logout-form.component.ts","webpack:///src/app/components/logout/logout-form.component.html","webpack:///src/app/components/profile/profile-form.component.ts","webpack:///src/app/components/profile/profile-form.component.html","webpack:///src/app/components/registration/registration-form.component.ts","webpack:///src/app/components/registration/registration-form.component.html","webpack:///src/app/components/root/site-root.component.html","webpack:///src/app/components/root/site-root.component.ts","webpack:///src/app/configurations/routes.ts","webpack:///src/app/guards/auth.guard.ts","webpack:///src/app/guards/index.ts","webpack:///src/app/guards/storage.guard.ts","webpack:///src/app/modules/admin/admin.module.ts","webpack:///src/app/modules/admin/components/claims/admin-claims.component.ts","webpack:///src/app/modules/admin/components/claims/admin-claims.component.html","webpack:///src/app/modules/admin/components/index.ts","webpack:///src/app/modules/admin/components/roles/admin-roles.component.ts","webpack:///src/app/modules/admin/components/roles/admin-roles.component.html","webpack:///src/app/modules/admin/components/root/admin-root.component.ts","webpack:///src/app/modules/admin/components/root/admin-root.component.html","webpack:///src/app/modules/admin/components/users/admin-users.component.ts","webpack:///src/app/modules/admin/components/users/admin-users.component.html","webpack:///src/app/modules/admin/configurations/routes.ts","webpack:///src/app/services/account.service.ts","webpack:///src/app/services/auth.service.ts","webpack:///src/app/services/auth/tokeninterceptor.service.ts","webpack:///src/app/services/base.service.ts","webpack:///src/app/services/config.service.ts","webpack:///src/app/services/emitter.service.ts","webpack:///src/app/services/index.ts","webpack:///src/app/services/lib/frontendapi.services.ts","webpack:///src/app/services/machinedata.service.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","getBaseUrl","apiURI","material","AppModule","provide","useClass","multi","useFactory","forRoot","declarations","imports","providers","bootstrap","DashboardComponent","accountService","machineService","machines","getUserDetails","user","error","message","getMachines","selector","templateUrl","styleUrls","SiteInfoComponent","LoginFormComponent","fb","route","router","authService","returnUrl","snapshot","queryParams","form","group","userName","required","email","password","isLoggedIn","navigate","loginInvalid","formSubmitAttempt","valid","logonModel","get","value","login","errors","onSubmit","LogoutFormComponent","cd","loggedOut","logout","detectChanges","ProfileFormComponent","getUserClaims","claims","RegistrationFormComponent","submitted","hide","firstName","lastName","location","isRequesting","registerModel","register","result","brandNew","Object","values","join","JSON","stringify","registerUser","SiteRootComponent","emitterService","navLinks","navLinksLazy","subscribe","data","authNavStatus$","push","config","filter","r","mainmenu","map","path","label","title","toString","children","outlet","c","routesConfig","redirectTo","pathMatch","component","canActivate","role","loadChildren","m","AdminModule","AuthGuard","loggedIn","StorageGuard","forChild","AdminClaimsComponent","AdminRolesComponent","AdminRootComponent","AdminUsersComponent","AccountService","api","localStorage","getItem","toPromise","reject","getClaims","AuthService","accounts","baseUrl","_authNavStatusSource","__loggedIn","asObservable","console","log","lastToken","oldTime","compareTime","Date","getTime","informListeners","next","getProviders","model","post2","post","res","authToken","setItem","expiresIn","currentTime","emit","removeItem","o","delay","mapTo","TokenInterceptorService","request","clone","setHeaders","token","handle","BaseService","applicationError","headers","modelStateErrors","serverError","type","key","ConfigService","_apiURI","window","origin","EmitterService","_emitters","ID","API_BASE_URL","ApiAccounts","http","jsonParseReviver","undefined","url_","replace","encodeURIComponent","options_","observe","responseType","pipe","response_","processGet","response","status","responseBlob","body","Blob","_headers","blobToText","_responseText","result200","resultData200","parse","UserViewModel","fromJS","result400","resultData400","throwException","processGetClaims","Array","isArray","item","ClaimViewModel","ApiAuth","processGetProviders","resultdefault","resultDatadefault","ProviderViewModel","credentials","content_","processPost","TokenResponseViewModel","ModelStateDictionary","processPost2","ApiMachines","MachineViewModel","processGet2","processPut","processDelete","ApiClaim","claimViewModel","processGetUserForClaim","claimType","oldClaimType","newClaimType","ApiRole","RoleViewModel","processGetbyId","ApiUser","processGetById","property","hasOwnProperty","_data","passwordHash","init","name","displayName","icon","Stream","toJSON","MarshalByRefObject","canTimeout","readTimeout","writeTimeout","root","ModelStateEntry","maxAllowedErrors","hasReachedMaxErrors","errorCount","count","isValid","validationState","rawValue","attemptedValue","ModelError","exception","Exception","errorMessage","stackTrace","innerException","source","ModelValidationState","LogonViewModel","RegistrationViewModel","BaseViewModel","startOperation","hasDevices","toISOString","ApiException","isApiException","obj","blob","observer","complete","reader","FileReader","onload","event","target","readAsText","MachineDataService","bootstrapModule","err"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,aAASA,wBAAT,CAAkCC,GAAlC,EAAuC;AACtC;AACA;AACA,aAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,YAAIC,CAAC,GAAG,IAAIC,KAAJ,CAAU,yBAAyBL,GAAzB,GAA+B,GAAzC,CAAR;AACAI,SAAC,CAACE,IAAF,GAAS,kBAAT;AACA,cAAMF,CAAN;AACA,OAJM,CAAP;AAKA;;AACDL,4BAAwB,CAACQ,IAAzB,GAAgC,YAAW;AAAE,aAAO,EAAP;AAAY,KAAzD;;AACAR,4BAAwB,CAACG,OAAzB,GAAmCH,wBAAnC;AACAS,UAAM,CAACC,OAAP,GAAiBV,wBAAjB;AACAA,4BAAwB,CAACW,EAAzB,GAA8B,yCAA9B;;;;;;;;;;;;;;;;ACZA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,8D,CAOA;AAyCA;;;AAGO,aAASC,UAAT,GAAmB;AACxB,aAAO,+DAAuBC,MAA9B;AACD;;AAED,QAAMC,QAAQ,GAAG,CAAC,wEAAD,EAAkB,4EAAlB,EAAqC,qEAArC,EAAoD,qEAApD,CAAjB;;QA4EaC,S;;;;;YAAAA,S;AAAS;;;;yBAATA,S;AAAS,O;AAAA,iBAvBT,CACT;AACA,8DAFS,EAGT;AAAEC,eAAO,EAAE,gEAAX;AAA6BC,gBAAQ,EAAE;AAAvC,OAHS,EAIT;AACA;AAAED,eAAO,EAAE,sEAAX;AAA8BC,gBAAQ,EAAE,wEAAxC;AAAiEC,aAAK,EAAE;AAAxE,OALS,EAMT;AACA;AAAEF,eAAO,EAAE,6DAAX;AAAyBG,kBAAU,EAAEP;AAArC,OAPS,EAQT;AACA,yEATS,EAUT;AACA,qEAXS,EAYT;AACA,kEAbS,EAcT;AACA,qEAfS,EAgBT;AACA,kEAjBS,EAiBa,wDAjBb,EAiB+B,4DAjB/B,EAkBT;AACA,8DAnBS,C;AAoBV,iBA5DC,wEA4DD,EA3DC,0DA2DD,EA1DC,kEA0DD,EAzDC,6DAAaQ,OAAb,CAAqB,oEAArB,CAyDD,EAxDC,uEAwDD,EAvDC,qEAuDD,SAtDIN,QAsDJ,GArDC,4FAqDD,EApDC,4EAoDD,EAnDC,4EAmDD,EAlDC,wEAkDD,EAjDC,sEAiDD,EAhDC,qFAgDD,EA/CC,iFA+CD,EA9CC,gFA8CD,EA7CC,uEA6CD,EA5CC,yEA4CD,EA3CC,yEA2CD,EA1CC,oFA0CD,EAzCC,qEAyCD,EAxCC,2EAwCD,EAvCC,2EAuCD,EAtCC,qEAsCD,EArCC,8EAqCD,EApCC,qEAoCD,EAnCC,2EAmCD,EAlCC,qEAkCD,EAjCC,+EAiCD,EAhCC,sFAgCD,EA/BC,uEA+BD,EA9BC,qEA8BD,EA7BC,4FA6BD,EA5BC,oFA4BD,EA3BC,yEA2BD,EA1BC,2EA0BD,EAzBC,8EAyBD,EAxBC,uEAwBD,EAvBC,qEAuBD,EAtBC,+EAsBD;;;;0HAGUC,S,EAAS;AAAA;AAAA,kBA/DlB,wEA+DkB,EA9DlB,0DA8DkB,EA7DlB,kEA6DkB,EA7DC,4DA6DD,EA3DlB,uEA2DkB,EA1DlB,qEA0DkB,EA5EJ,wEA4EI,EA5Ea,4EA4Eb,EA5EgC,qEA4EhC,EA5E+C,qEA4E/C,EAxDlB,4FAwDkB,EAvDlB,4EAuDkB,EAtDlB,4EAsDkB,EArDlB,wEAqDkB,EApDlB,sEAoDkB,EAnDlB,qFAmDkB,EAlDlB,iFAkDkB,EAjDlB,gFAiDkB,EAhDlB,uEAgDkB,EA/ClB,yEA+CkB,EA9ClB,yEA8CkB,EA7ClB,oFA6CkB,EA5ClB,qEA4CkB,EA3ClB,2EA2CkB,EA1ClB,2EA0CkB,EAzClB,qEAyCkB,EAxClB,8EAwCkB,EAvClB,qEAuCkB,EAtClB,2EAsCkB,EArClB,qEAqCkB,EApClB,+EAoCkB,EAnClB,sFAmCkB,EAlClB,uEAkCkB,EAjClB,qEAiCkB,EAhClB,4FAgCkB,EA/BlB,oFA+BkB,EA9BlB,yEA8BkB,EA7BlB,2EA6BkB,EA5BlB,8EA4BkB,EA3BlB,uEA2BkB,EA1BlB,qEA0BkB,EAzBlB,+EAyBkB;AAAA,O;AAzBA,K;;;;;sEAyBTA,S,EAAS;cA1ErB,sDA0EqB;eA1EZ;AACRM,sBAAY,EAAE,CACZ,oEADY,EAEZ,oEAFY,EAGZ,qEAHY,EAIZ,qEAJY,EAKZ,sEALY,EAMZ,4EANY,EAOZ,uEAPY,CADN;AAURC,iBAAO,GACL,wEADK,EAEL,0DAFK,EAGL,kEAHK,EAIL,6DAAaF,OAAb,CAAqB,oEAArB,CAJK,EAKL,uEALK,EAML,qEANK,SAOFN,QAPE,GAQL,4FARK,EASL,4EATK,EAUL,4EAVK,EAWL,wEAXK,EAYL,sEAZK,EAaL,qFAbK,EAcL,iFAdK,EAeL,gFAfK,EAgBL,uEAhBK,EAiBL,yEAjBK,EAkBL,yEAlBK,EAmBL,oFAnBK,EAoBL,qEApBK,EAqBL,2EArBK,EAsBL,2EAtBK,EAuBL,qEAvBK,EAwBL,8EAxBK,EAyBL,qEAzBK,EA0BL,2EA1BK,EA2BL,qEA3BK,EA4BL,+EA5BK,EA6BL,sFA7BK,EA8BL,uEA9BK,EA+BL,qEA/BK,EAgCL,4FAhCK,EAiCL,oFAjCK,EAkCL,yEAlCK,EAmCL,2EAnCK,EAoCL,8EApCK,EAqCL,uEArCK,EAsCL,qEAtCK,EAuCL,+EAvCK,EAVC;AAmDRS,mBAAS,EAAE,CACT;AACA,kEAFS,EAGT;AAAEP,mBAAO,EAAE,gEAAX;AAA6BC,oBAAQ,EAAE;AAAvC,WAHS,EAIT;AACA;AAAED,mBAAO,EAAE,sEAAX;AAA8BC,oBAAQ,EAAE,wEAAxC;AAAiEC,iBAAK,EAAE;AAAxE,WALS,EAMT;AACA;AAAEF,mBAAO,EAAE,6DAAX;AAAyBG,sBAAU,EAAEP;AAArC,WAPS,EAQT;AACA,6EATS,EAUT;AACA,yEAXS,EAYT;AACA,sEAbS,EAcT;AACA,yEAfS,EAgBT;AACA,sEAjBS,EAiBa,wDAjBb,EAiB+B,4DAjB/B,EAkBT;AACA,kEAnBS,CAnDH;AAwERY,mBAAS,EAAE,CAAE,oEAAF;AAxEH,S;AA0EY,Q;;;;;;;;;;;;;;;;;;ACnItB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACCA;;AAAwB;;AAAS;;;;;;AAAT;;AAAA;;;;;;AAEtB;;AACE;;AACE;;AACE;;AACA;;AAAgB;;AAAS;;AACzB;;AAAmB;;AAAuB;;AAC5C;;AACA;;AACA;;AACE;;AACE;;AAAI;;AAAS;;AACb;;AAAI;;AAAmB;;AACvB;;AAAI;;AAAM;;AACV;;AAAI;;AAAgB;;AACtB;;AACF;;AACA;;AACE;;AAAmB;;AAAO;;AAC1B;;AAAmB;;AAAO;;AAC5B;;AACF;;AACF;;;;;;AAVY;;AAAA;;AAEA;;AAAA;;;;;;AAwBA;;AACE;;AACF;;;;;;AADE;;AAAA;;;;;;AAfZ;;AACE;;AACE;;AACA;;AAAgB;;AAAY;;AAC5B;;AAAmB;;AAAuB;;AAC5C;;AACA;;AACA;;AACE;;AACE;;AAAI;;AAAkB;;AACtB;;AAAI;;AAAqB;;AACzB;;AAAI;;AAAgB;;AACpB;;AACE;;AACE;;AAGF;;AACF;;AACF;;AACF;;AACA;;AACE;;AAAmB;;AAAM;;AACzB;;AAAmB;;AAAO;;AAC5B;;AACF;;;;;;AAfU;;AAAA;;AAII;;AAAA;;;;;;AAfhB;;AACE;;AA0BF;;;;;;;;AA1BiC;;AAAA,0FAAiC,UAAjC,EAAiC,GAAjC;;;;;;AA2BZ;;;;;;AACI;;;;QD7CdC,kB;AASX,kCAAoBC,cAApB,EAA4DC,cAA5D,EAAgG;AAAA;;AAA5E,aAAAD,cAAA,GAAAA,cAAA;AAAwC,aAAAC,cAAA,GAAAA,cAAA;AAC1D,aAAKC,QAAL,GAAgB,EAAhB;AACD;;;;mCAEU;AAAA;;AACT;AACA,eAAKF,cAAL,CAAoBG,cAApB,GACGzB,IADH,CACQ,UAAA0B,IAAI;AAAA,mBAAI,KAAI,CAACA,IAAL,GAAYA,IAAhB;AAAA,WADZ,WAES,UAAAC,KAAK;AAAA,mBAAI,KAAI,CAACA,KAAL,GAAaA,KAAK,CAACC,OAAvB;AAAA,WAFd;AAGA,eAAKL,cAAL,CAAoBM,WAApB,GACG7B,IADH,CACQ,UAAAwB,QAAQ;AAAA,mBAAI,KAAI,CAACA,QAAL,GAAgBA,QAApB;AAAA,WADhB,WAES,UAAAG,KAAK;AAAA,mBAAI,KAAI,CAACA,KAAL,GAAaA,KAAK,CAACC,OAAvB;AAAA,WAFd;AAGD;;;;;;;uBArBUP,kB,EAAkB,+H,EAAA,mI;AAAA,K;;;YAAlBA,kB;AAAkB,oC;AAAA,e;AAAA,a;AAAA,2iB;AAAA;AAAA;ACT/B;;AAAI;;AAAS;;AACb;;AACA;;AACE;;AAsBA;;AA4BA;;AACA;;AACF;;;;;;;;AAtDU;;AAAA;;AAEU;;AAAA,qFAAyB,UAAzB,EAAyB,GAAzB;;AAsBA;;AAAA,yFAAiC,UAAjC,EAAiC,GAAjC;;;;;;;;;sEDhBPA,kB,EAAkB;cAL9B,uDAK8B;eALpB;AACTS,kBAAQ,EAAE,eADD;AAETC,qBAAW,EAAE,0BAFJ;AAGTC,mBAAS,EAAE,CAAC,0BAAD;AAHF,S;AAKoB,Q;;;;;;;;;;;;;;;;;;;;;;;;AET/B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,O,CAAA;AACA;;;;;;;;;;;;;;;;;;ACDA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAMaC,iB,GAGX,6BAAc;AAAA;AACb,K;;;uBAJUA,iB;AAAiB,K;;;YAAjBA,iB;AAAiB,gC;AAAA,e;AAAA,a;AAAA,wE;AAAA;AAAA;ACN9B;;AACE;;AACA;;AACE;;AAAI;;AAAwD;;AAC5D;;AAAI;;AAAsD;;AAC1D;;AAAI;;AAAsD;;AAC5D;;AACA;;AACA;;AACE;;AAAI;;AAA2B;;AAC/B;;AAAI;;AAAyB;;AAC7B;;AAAI;;AAA0B;;AAChC;;AACA;;AAAG;;AAA4C;;AAAK;;AAAK;;AAAuC;;AAChG;;AAAG;;AAA0D;;AAC7D;;AAAG;;AAAiE;;AACtE;;AACA;;AACE;;AAAG;;AAA+D;;AAClE;;AAAG;;AACkD;;AACvD;;;;AAR2D;;AAAA;;;;;;;;sEDP9CA,iB,EAAiB;cAJ7B,uDAI6B;eAJnB;AACTH,kBAAQ,EAAE,WADD;AAETC,qBAAW,EAAE;AAFJ,S;AAImB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEHxB;;AACE;;AAAsB;;AAAM;;AAC5B;;AAAa;;AAAkB;;AAC/B;;AACE;;AAAO;;AAAyB;;AAClC;;AACF;;;;;;AAJe;;AAAA;;AAEJ;;AAAA;;;;;;AALb;;AACE;;AAOF;;;;;;AAPiB;;AAAA;;;;;;AAUf;;AACE;;AACF;;;;;;AAgBA;;AAA+B;;AAAa;;;;;;AAIlD;;AACE;;AAAgB;;AAAgB;;AAChC;;;;AACF;;;;;;AADE;;AAAA;;;;QC1BWG,kB;AASX,kCACUC,EADV,EAEUC,KAFV,EAGUC,MAHV,EAIUC,WAJV,EAIkC;AAAA;;AAHxB,aAAAH,EAAA,GAAAA,EAAA;AACA,aAAAC,KAAA,GAAAA,KAAA;AACA,aAAAC,MAAA,GAAAA,MAAA;AACA,aAAAC,WAAA,GAAAA,WAAA;AAET;;;;mCAEgB;;;;;;AACf,yBAAKC,SAAL,GAAiB,KAAKH,KAAL,CAAWI,QAAX,CAAoBC,WAApB,CAAgCF,SAAhC,IAA6C,YAA9D;AAEA,yBAAKG,IAAL,GAAY,KAAKP,EAAL,CAAQQ,KAAR,CAAc;AACxBC,8BAAQ,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWC,QAAZ,EAAsB,0DAAWC,KAAjC,CAAL,CADc;AAExBC,8BAAQ,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWF,QAAZ,CAAL;AAFc,qBAAd,CAAZ;;AAKI,2BAAM,KAAKP,WAAL,CAAiBU,UAAjB,EAAN;;;;;;;;;AACF,2BAAM,KAAKX,MAAL,CAAYY,QAAZ,CAAqB,CAAC,KAAKV,SAAN,CAArB,CAAN;;;;AAEe,2BAAM,KAAKD,WAAL,CAAiBnB,SAAjB,EAAN;;;AAAjB,yBAAKA,S;;;;;;;;;AACN;;;mCAEgB;;;;;;;AACf,yBAAK+B,YAAL,GAAoB,KAApB;AACA,yBAAKC,iBAAL,GAAyB,IAAzB;;yBACI,KAAKT,IAAL,CAAUU,K;;;;;;AAEJC,8B,GAA8B;AAClCT,8BAAQ,EAAE,KAAKF,IAAL,CAAUY,GAAV,CAAc,UAAd,EAA0BC,KADF;AAElCR,8BAAQ,EAAE,KAAKL,IAAL,CAAUY,GAAV,CAAc,UAAd,EAA0BC;AAFF,qB;;AAIpC,2BAAM,KAAKjB,WAAL,CAAiBkB,KAAjB,CAAuBH,UAAvB,CAAN;;;AACA,yBAAKF,iBAAL,GAAyB,KAAzB;;;;;;;AAEA,yBAAKD,YAAL,GAAoB,IAApB;AACA,yBAAKO,MAAL;;;;;;;AAGF,yBAAKN,iBAAL,GAAyB,KAAzB;;;;;;;;;AAEH;;;;;;;uBAjDUjB,kB,EAAkB,2H,EAAA,+H,EAAA,uH,EAAA,4H;AAAA,K;;;YAAlBA,kB;AAAkB,iC;AAAA,e;AAAA,a;AAAA,ye;AAAA;AAAA;ADX/B;;AACE;;AACE;;AASA;;AAAyB;AAAA,mBAAY,IAAAwB,QAAA,EAAZ;AAAsB,WAAtB;;AACvB;;AAAI;;AAAM;;AACV;;AAGA;;AACE;;AAAW;;AAAiB;;AAC5B;;AACA;;AACE;;AACF;;AACF;;AACA;;AACE;;AAAW;;AAAQ;;AACnB;;AACA;;AACE;;AACF;;AACF;;AACA;;AAA0C;;AAAK;;AAC/C;;AACF;;AACF;;AACF;;AACA;;;;AAjCc;;AAAA;;AASJ;;AAAA;;AAEO;;AAAA;;AAkBN;;AAAA;;AAID;;AAAA;;;;;;;;;;sECxBGxB,kB,EAAkB;cAL9B,uDAK8B;eALpB;AACTJ,kBAAQ,EAAE,YADD;AAETC,qBAAW,EAAE,2BAFJ;AAGTC,mBAAS,EAAE,CAAC,2BAAD;AAHF,S;AAKoB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACX/B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACOI;;AAAoD;;AAAyB;;;;;;AAE7E;;AAAmD;;AAAqC;;;;QDE/E2B,mB;AAKX,mCAAoBrB,WAApB,EAAsDsB,EAAtD,EAA6E;AAAA;;AAAA;;AAAzD,aAAAtB,WAAA,GAAAA,WAAA;AAAkC,aAAAsB,EAAA,GAAAA,EAAA;AAFtD,aAAAC,SAAA,GAAqB,KAArB,CAE6E,CAC3E;;AACA,aAAKvB,WAAL,CAAiBwB,MAAjB,GAA0B9D,IAA1B,CAA+B;AAAA,iBAAM,MAAI,CAAC6D,SAAL,GAAiB,IAAvB;AAAA,SAA/B;AACD;;;;mCAEU,CACT;AACA;AACD;;;0CAEiB;AAChB,eAAKD,EAAL,CAAQG,aAAR;AACD;;;;;;;uBAjBUJ,mB,EAAmB,4H,EAAA,gI;AAAA,K;;;YAAnBA,mB;AAAmB,kC;AAAA,c;AAAA,a;AAAA,mO;AAAA;AAAA;ACXhC;;AACC;;AACC;;AACC;;AAEC;;AAAI;;AAAM;;AAEV;;AAEA;;AAED;;AACD;;AACD;;AACD;;;;AAPqC;;AAAA;;AAEA;;AAAA;;;;;;;;;sEDExBA,mB,EAAmB;cAJ/B,uDAI+B;eAJrB;AACT7B,kBAAQ,EAAE,aADD;AAETC,qBAAW,EAAE;AAFJ,S;AAIqB,Q;;;;;;;;;;;;;;;;;;;;;;;;AEXhC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQaiC,oB;AAKX,oCAAoB1C,cAApB,EAAoD;AAAA;;AAAhC,aAAAA,cAAA,GAAAA,cAAA;AAEnB;;;;mCAEU;AAAA;;AACT,eAAKA,cAAL,CAAoB2C,aAApB,GAAoCjE,IAApC,CAAyC,UAAAkE,MAAM;AAAA,mBAAI,MAAI,CAACA,MAAL,GAAcA,MAAlB;AAAA,WAA/C;AACD;;;qCAEY,CACX;AACD;;;;;;;uBAfUF,oB,EAAoB,+H;AAAA,K;;;YAApBA,oB;AAAoB,mC;AAAA,c;AAAA,a;AAAA;AAAA;ACRjC;;;;;;AAAA;;;;;;;;;sEDQaA,oB,EAAoB;cAJhC,uDAIgC;eAJtB;AACTlC,kBAAQ,EAAE,cADD;AAETC,qBAAW,EAAE;AAFJ,S;AAIsB,Q;;;;;;;;;;;;;;;;;;;;;;AERjC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACyCM;;AAA0B;;AAAc;;;;;;AAK9C;;AACE;;AAAgB;;AAAgB;;AAChC;;AACF;;;;;;AADE;;AAAA;;;;QDrCWoC,yB;AAQX,yCAAoBhC,EAApB,EAA6CG,WAA7C,EAA+ED,MAA/E,EAA+F;AAAA;;AAA3E,aAAAF,EAAA,GAAAA,EAAA;AAAyB,aAAAG,WAAA,GAAAA,WAAA;AAAkC,aAAAD,MAAA,GAAAA,MAAA;AAHxE,aAAA+B,SAAA,GAAqB,KAArB;AACA,aAAAC,IAAA,GAAO,IAAP;AAGN;;;;mCAEU;AACT,eAAK3B,IAAL,GAAY,KAAKP,EAAL,CAAQQ,KAAR,CAAc;AACxB2B,qBAAS,EAAE,CAAC,EAAD,EAAK,0DAAWzB,QAAhB,CADa;AAExB0B,oBAAQ,EAAE,CAAC,EAAD,EAAK,0DAAW1B,QAAhB,CAFc;AAGxBC,iBAAK,EAAE,CAAC,EAAD,EAAK,0DAAWD,QAAhB,EAA0B,0DAAWC,KAArC,CAHiB;AAIxBC,oBAAQ,EAAE,CAAC,EAAD,EAAK,0DAAWF,QAAhB,CAJc;AAKxB2B,oBAAQ,EAAE,CAAC,EAAD;AALc,WAAd,CAAZ;AAQD;;;uCAEc;AAAA;;AACb,eAAKJ,SAAL,GAAiB,IAAjB;AACA,eAAKK,YAAL,GAAoB,IAApB;AACA,eAAKhB,MAAL,GAAc,EAAd;;AACA,cAAI,KAAKf,IAAL,CAAUU,KAAd,EAAqB;AACnB,gBAAMsB,aAAa,GAA2B;AAC5CJ,uBAAS,EAAE,KAAK5B,IAAL,CAAUY,GAAV,CAAc,WAAd,EAA2BC,KADM;AAE5CgB,sBAAQ,EAAE,KAAK7B,IAAL,CAAUY,GAAV,CAAc,UAAd,EAA0BC,KAFQ;AAG5CT,mBAAK,EAAE,KAAKJ,IAAL,CAAUY,GAAV,CAAc,OAAd,EAAuBC,KAHc;AAI5CiB,sBAAQ,EAAE,KAAK9B,IAAL,CAAUY,GAAV,CAAc,UAAd,EAA0BC,KAJQ;AAK5CR,sBAAQ,EAAE,KAAKL,IAAL,CAAUY,GAAV,CAAc,UAAd,EAA0BC;AALQ,aAA9C;AAOA,iBAAKjB,WAAL,CAAiBqC,QAAjB,CAA0BD,aAA1B,EACG1E,IADH,CACQ;AAAA,qBAAM,MAAI,CAACyE,YAAL,GAAoB,KAA1B;AAAA,aADR,EAEGzE,IAFH,CAGI,UAAA4E,MAAM,EAAI;AACR,kBAAIA,MAAJ,EAAY;AACV,sBAAI,CAACvC,MAAL,CAAYY,QAAZ,CAAqB,CAAC,QAAD,CAArB,EAAiC;AAAER,6BAAW,EAAE;AAAEoC,4BAAQ,EAAE,IAAZ;AAAkB/B,yBAAK,EAAE4B,aAAa,CAAC5B;AAAvC;AAAf,iBAAjC;AACD;AACF,aAPL,EAQI,UAAAW,MAAM;AAAA,qBAAI,MAAI,CAACA,MAAL,GAAcA,MAAM,CAAC9B,KAAP,GAAemD,MAAM,CAACC,MAAP,CAActB,MAAM,CAAC9B,KAArB,EAA4BqD,IAA5B,CAAiC,EAAjC,CAAf,GAAsDC,IAAI,CAACC,SAAL,CAAezB,MAAf,CAAxE;AAAA,aARV;AASD;AACF;;;;;;;uBA5CUU,yB,EAAyB,2H,EAAA,4H,EAAA,uH;AAAA,K;;;YAAzBA,yB;AAAyB,wC;AAAA,e;AAAA,a;AAAA,u5B;AAAA;AAAA;ACXtC;;AACE;;AAAgB;;AAAmB;;AACnC;;AAEE;;AAAoC;AAAA,mBAAY,IAAAgB,YAAA,EAAZ;AAA0B,WAA1B;;AAElC;;AACE;;AAAW;;AAAU;;AACrB;;AACA;;AAAW;;AAAmB;;AAChC;;AAEA;;AACE;;AAAW;;AAAS;;AACpB;;AACA;;AAAW;;AAAmB;;AAChC;;AAEA;;AACE;;AAAW;;AAAsB;;AACjC;;AACA;;AAAW;;AAA0B;;AACrC;;AAAU;;AAAwB;;AACpC;;AAEA;;AACE;;AAAW;;AAAQ;;AACnB;;AACA;;AAAkC;AAAA;AAAA;;AAChC;;AAAU;;AAA0C;;AACtD;;AACA;;AAAW;;AAA6B;;AAC1C;;AAEA;;AACE;;AAAW;;AAAe;;AAC1B;;AACA;;AAAU;;AAAsC;;AAClD;;AAEA;;AAAoF;;AAAO;;AAC3F;;AAEF;;AACF;;AACF;;AACA;;;;AA1CU;;AAAA;;AAwBuD;;AAAA,mGAAmC,cAAnC,EAAmC,QAAnC;;AAC7C;;AAAA;;AAW4B;;AAAA;;AACrC;;AAAA;;AAKD;;AAAA;;;;;;;;;sEDnCGhB,yB,EAAyB;cALrC,uDAKqC;eAL3B;AACTrC,kBAAQ,EAAE,mBADD;AAETC,qBAAW,EAAE,oCAFJ;AAGTC,mBAAS,EAAE,CAAC,kCAAD;AAHF,S;AAK2B,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AETpC;;AAA4C;;AAAuB;;;;;;AAAvB;;AAAA;;;;;;AAE1C;;AAKE;;AACF;;;;;;AAFG;;;;;;AAGH;;AAKE;;AACF;;;;;;AAFG;;;;;;AAGH;;AAKE;;AACF;;;;;;;;AAJG,6FAAwB,QAAxB,EAAwB,aAAxB;;AAGD;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAUA;;AAAuH;;AAAgB;;;;;;AAA/E;;AAA+D;;AAAA;;;;;;;;QCxBhHoD,iB;AAOX,iCACU9C,WADV,EAEU+C,cAFV,EAGUhD,MAHV,EAIUuB,EAJV,EAI+B;AAAA;;AAAA;;AAHrB,aAAAtB,WAAA,GAAAA,WAAA;AACA,aAAA+C,cAAA,GAAAA,cAAA;AACA,aAAAhD,MAAA,GAAAA,MAAA;AACA,aAAAuB,EAAA,GAAAA,EAAA;AATV,aAAAZ,UAAA,GAAsB,KAAtB;AAEA,aAAAsC,QAAA,GAA8C,EAA9C;AACA,aAAAC,YAAA,GAAkD,EAAlD;AAQE,aAAKF,cAAL,CAAoB/B,GAApB,CAAwB,YAAxB,EAAsCkC,SAAtC,CAAgD,UAAAC,IAAI;AAAA,iBAAI,MAAI,CAAC7C,QAAL,GAAgB6C,IAAI,CAAC7C,QAAL,IAAiB6C,IAAI,CAAC3C,KAA1C;AAAA,SAApD;AACA,aAAKR,WAAL,CAAiBoD,cAAjB,CAAgCF,SAAhC,CAA0C,UAAAC,IAAI;AAAA,iBAAI,MAAI,CAACzC,UAAL,GAAkByC,IAAtB;AAAA,SAA9C;AACD;;;;mCAEgB;;;;;;;;;;AACG,2BAAM,KAAKnD,WAAL,CAAiBU,UAAjB,EAAN;;;AAAlB,yBAAKA,U;;AACL,2CAAKsC,QAAL,EAAcK,IAAd,0CACM,KAAKtD,MAAL,CAAYuD,MAAZ,CACDC,MADC,CACM,UAAAC,CAAC;AAAA,6BAAIA,CAAC,CAACL,IAAF,IAAUK,CAAC,CAACL,IAAF,CAAOM,QAAP,KAAoB,IAAlC;AAAA,qBADP,EAEDC,GAFC,CAEG,UAAAF,CAAC,EAAI;AACR,6BAAO;AACLG,4BAAI,EAAEH,CAAC,CAACG,IADH;AAELC,6BAAK,EAAEJ,CAAC,CAACL,IAAF,CAAOU,KAAP,CAAaC,QAAb;AAFF,uBAAP;AAID,qBAPC,CADN;;AAUMC,4B,GAAW,KAAKhE,MAAL,CAAYuD,MAAZ,CAAmBC,MAAnB,CAA0B,UAAAC,CAAC;AAAA,6BAAIA,CAAC,CAACQ,MAAF,KAAa,SAAjB;AAAA,qBAA3B,C;AACjB,yBAAKf,YAAL,GAAoBc,QAAQ,CAACL,GAAT,CAAa,UAAAO,CAAC,EAAI;AACpC,6BAAO;AACLN,4BAAI,EAAEM,CAAC,CAACN,IADH;AAELC,6BAAK,EAAEK,CAAC,CAACd,IAAF,CAAOU,KAAP,CAAaC,QAAb;AAFF,uBAAP;AAID,qBALmB,CAApB;;;;;;;;;AAMD;;;0CAEiB;AAChB,eAAKxC,EAAL,CAAQG,aAAR;AACD;;;;;;;uBAxCUqB,iB,EAAiB,sH,EAAA,yH,EAAA,uH,EAAA,gI;AAAA,K;;;YAAjBA,iB;AAAiB,gC;AAAA,e;AAAA,a;AAAA,g8B;AAAA;AAAA;ADT9B;;AACE;;AAAI;;AAA2B;;AAC/B;;AACA;;AACE;;AAOA;;AAOA;;AAOA;;AAKE;;AACF;;AACA;;AACE;;AACF;;AACF;;AACA;;AACE;;AACA;;AACF;;AACF;;;;;;;;AAtC2B;;AAAA;;AAGpB;;AAAA;;AAOA;;AAAA;;AAOA;;AAAA;;AAMA;;AAAA,6FAA6B,YAA7B,EAA6B,qEAA7B,EAA6B,QAA7B,EAA6B,YAA7B;;AAQqB;;AAAA;;;;;;;;;sECxBfA,iB,EAAiB;cAL7B,uDAK6B;eALnB;AACTtD,kBAAQ,EAAE,WADD;AAETC,qBAAW,EAAE,0BAFJ;AAGTC,mBAAS,EAAE,CAAC,0BAAD;AAHF,S;AAKmB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACP9B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAGO,QAAMwE,YAAY,GAAW,CAClC;AACEP,UAAI,EAAE,EADR;AAEEQ,gBAAU,EAAE,MAFd;AAGEC,eAAS,EAAE;AAHb,KADkC,EAMlC;AACET,UAAI,EAAE,cADR;AAEEU,eAAS,EAAE,oEAFb;AAGElB,UAAI,EAAE;AACJU,aAAK,EAAE;AADH;AAHR,KANkC,EAalC;AACEF,UAAI,EAAE,OADR;AAEEU,eAAS,EAAE,oEAFb;AAGElB,UAAI,EAAE;AACJU,aAAK,EAAE;AADH;AAHR,KAbkC,EAoBlC;AACEF,UAAI,EAAE,QADR;AAEEU,eAAS,EAAE,qEAFb;AAGElB,UAAI,EAAE;AACJU,aAAK,EAAE;AADH;AAHR,KApBkC,EA2BlC;AACEF,UAAI,EAAE,UADR;AAEEU,eAAS,EAAE,2EAFb;AAGElB,UAAI,EAAE;AACJM,gBAAQ,EAAE,IADN;AAEJI,aAAK,EAAE;AAFH;AAHR,KA3BkC,EAmClC;AACEF,UAAI,EAAE,MADR;AAEEU,eAAS,EAAE,mEAFb;AAGElB,UAAI,EAAE;AACJM,gBAAQ,EAAE,IADN;AAEJI,aAAK,EAAE;AAFH;AAHR,KAnCkC,EA2ClC;AACEF,UAAI,EAAE,WADR;AAEEU,eAAS,EAAE,oEAFb;AAGEC,iBAAW,EAAE,CAAC,uDAAD,CAHf;AAIEnB,UAAI,EAAE;AACJM,gBAAQ,EAAE,IADN;AAEJI,aAAK,EAAE,WAFH;AAGJU,YAAI,EAAE;AAHF;AAJR,KA3CkC,EAqDlC;AACEZ,UAAI,EAAE,OADR;AAEEa,kBAAY,EAAE;AAAA,eAAM;AAAA;AAAA,oDAAwC9G,IAAxC,CAA6C,UAAA+G,CAAC;AAAA,iBAAIA,CAAC,CAACC,WAAN;AAAA,SAA9C,CAAN;AAAA,OAFhB;AAGEvB,UAAI,EAAE;AACJM,gBAAQ,EAAE,KADN;AAEJc,YAAI,EAAE;AAFF;AAHR,KArDkC,CAA7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QCAMI,S;AACX,yBAAoB3E,WAApB,EAAqDD,MAArD,EAAqE;AAAA;;AAAjD,aAAAC,WAAA,GAAAA,WAAA;AAAiC,aAAAD,MAAA,GAAAA,MAAA;AAAkB;;;;sCAEnD;;;;;;;;AACD,2BAAM,KAAKC,WAAL,CAAiBU,UAAjB,EAAN;;;AAAXkE,4B;;wBACDA,Q;;;;;AAEF,yBAAK7E,MAAL,CAAYY,QAAZ,CAAqB,CAAC,QAAD,CAArB;sDACO,K;;;sDAGH,I;;;;;;;;;AACR;;;;;;;uBAZUgE,S,EAAS,mH,EAAA,8G;AAAA,K;;;aAATA,S;AAAS,eAATA,SAAS;;;;;sEAATA,S,EAAS;cADrB;AACqB,Q;;;;;;;;;;;;;;;;;;;;;;;;ACLtB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;ACAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAMaE,Y;AAEX,4BAAoB9E,MAApB,EAA4CC,WAA5C,EAAsE;AAAA;;AAAlD,aAAAD,MAAA,GAAAA,MAAA;AAAwB,aAAAC,WAAA,GAAAA,WAAA;AAA6B;;;;sCAE3D;AACZ,cAAI,KAAKA,WAAL,CAAiBU,UAArB,EAAiC;AAC/B,mBAAO,IAAP;AACD;;AAED,eAAKX,MAAL,CAAYY,QAAZ,CAAqB,CAAC,QAAD,CAArB;AACA,iBAAO,KAAP;AACD;;;;;;;uBAXUkE,Y,EAAY,8G,EAAA,6G;AAAA,K;;;aAAZA,Y;AAAY,eAAZA,YAAY;;;;;sEAAZA,Y,EAAY;cADxB;AACwB,Q;;;;;;;;;;;;;;;;;;;;;;;;ACNzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QA6BaH,W;;;;;YAAAA;;;;yBAAAA,W;AAAW,O;AAAA,iBAFX,E;AAAE,gBAVJ,CACP,0DADO,EAEP,kEAFO,EAGP,4DAHO,EAIP,qEAJO,EAKP,6DAAaI,QAAb,CAAsB,mEAAtB,CALO,CAUI;;;;0HAEFJ,W,EAAW;AAAA;AAAA,kBAXpB,0DAWoB,EAVpB,kEAUoB,EATpB,4DASoB,EARpB,qEAQoB,EARJ,4DAQI;AARJ;AAQI,O;AARJ,K;;;;;sEAQPA,W,EAAW;cAnBvB,sDAmBuB;eAnBd;AACR/F,sBAAY,EAAE,CACZ,oEADY,EAEZ,qEAFY,EAGZ,qEAHY,EAIZ,sEAJY,CADN;AAORC,iBAAO,EAAE,CACP,0DADO,EAEP,kEAFO,EAGP,4DAHO,EAIP,qEAJO,EAKP,6DAAakG,QAAb,CAAsB,mEAAtB,CALO,CAPD;AAcR9G,iBAAO,EAAE,CACP,oEADO,CAdD;AAiBRa,mBAAS,EAAE;AAjBH,S;AAmBc,Q;;;;;;;;;;;;;;;;;;AC7BxB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOakG,oB;AAGX,sCAAc;AAAA;AAEb;;;;mCAEO,CAEP;;;;;;;uBATUA,oB;AAAoB,K;;;YAApBA,oB;AAAoB,mC;AAAA,c;AAAA,a;AAAA;AAAA;ACPjC;;AAAI;;AAAc;;;;;;;;sEDOLA,oB,EAAoB;cALhC,uDAKgC;eALtB;AACTvF,kBAAQ,EAAE,cADD;AAETC,qBAAW,EAAE,6BAFJ;AAGTC,mBAAS,EAAE,CAAC,6BAAD;AAHF,S;AAKsB,Q;;;;;;;;;;;;;;;;;;;;AEPjC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,O,CAAA;AACA;;;;;;;;;;;;;;;;;;ACDA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOasF,mB;AAGX,qCAAc;AAAA;AAEb;;;;mCAEO,CAEP;;;;;;;uBATUA,mB;AAAmB,K;;;YAAnBA,mB;AAAmB,kC;AAAA,c;AAAA,a;AAAA;AAAA;ACPhC;;AAAI;;AAAa;;;;;;;;sEDOJA,mB,EAAmB;cAL/B,uDAK+B;eALrB;AACTxF,kBAAQ,EAAE,aADD;AAETC,qBAAW,EAAE,4BAFJ;AAGTC,mBAAS,EAAE,CAAC,4BAAD;AAHF,S;AAKqB,Q;;;;;;;;;;;;;;;;;;;;AEPhC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOauF,kB;AAGX,oCAAc;AAAA;AAEb;;;;mCAEO,CAEP;;;;;;;uBATUA,kB;AAAkB,K;;;YAAlBA,kB;AAAkB,iC;AAAA,e;AAAA,a;AAAA,0C;AAAA;AAAA;ACP/B;;AAAI;;AAAqB;;AACzB;;AACA;;AACE;;AACA;;AACE;;AAAI;;AAA6C;;AACjD;;AAAI;;AAA+B;;AACrC;;AACA;;AAEF;;AACA;;;;;;;;sEDJaA,kB,EAAkB;cAL9B,uDAK8B;eALpB;AACTzF,kBAAQ,EAAE,YADD;AAETC,qBAAW,EAAE,2BAFJ;AAGTC,mBAAS,EAAE,CAAC,2BAAD;AAHF,S;AAKoB,Q;;;;;;;;;;;;;;;;;;;;AEP/B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOawF,mB;AAGX,qCAAc;AAAA;AAEb;;;;mCAEO,CAEP;;;;;;;uBATUA,mB;AAAmB,K;;;YAAnBA,mB;AAAmB,kC;AAAA,c;AAAA,a;AAAA;AAAA;ACPhC;;AAAI;;AAAY;;;;;;;;sEDOHA,mB,EAAmB;cAL/B,uDAK+B;eALrB;AACT1F,kBAAQ,EAAE,aADD;AAETC,qBAAW,EAAE,4BAFJ;AAGTC,mBAAS,EAAE,CAAC,4BAAD;AAHF,S;AAKqB,Q;;;;;;;;;;;;;;;;;;;;AELhC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAGO,QAAMwE,YAAY,GAAW,CAClC;AACEP,UAAI,EAAE,EADR;AAEEW,iBAAW,EAAE,CAAC,4DAAD,CAFf;AAGED,eAAS,EAAE,oEAHb;AAIElB,UAAI,EAAE;AACJU,aAAK,EAAE;AADH;AAJR,KADkC,EASlC;AACEF,UAAI,EAAE,OADR;AAEEW,iBAAW,EAAE,CAAC,4DAAD,CAFf;AAGED,eAAS,EAAE,qEAHb;AAIEL,YAAM,EAAE,SAJV;AAKEb,UAAI,EAAE;AACJU,aAAK,EAAE;AADH;AALR,KATkC,EAiBhC;AACAF,UAAI,EAAE,OADN;AAEAW,iBAAW,EAAE,CAAC,4DAAD,CAFb;AAGAD,eAAS,EAAE,qEAHX;AAIAL,YAAM,EAAE,SAJR;AAKAb,UAAI,EAAE;AACJU,aAAK,EAAE;AADH;AALN,KAjBgC,EAyBhC;AACAF,UAAI,EAAE,QADN;AAEAW,iBAAW,EAAE,CAAC,4DAAD,CAFb;AAGAD,eAAS,EAAE,sEAHX;AAIAL,YAAM,EAAE,SAJR;AAKAb,UAAI,EAAE;AACJU,aAAK,EAAE;AADH;AALN,KAzBgC,CAA7B;;;;;;;;;;;;;;;;ACLP;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QASasB,c;;;;;AAEX,8BAAoBC,GAApB,EAAsC;AAAA;;AAAA;;AACpC;AADkB,eAAAA,GAAA,GAAAA,GAAA;AAAkB;AAErC;;;;yCAEa;AACZ,cAAInH,EAAE,GAAGoH,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAT;;AACA,cAAIrH,EAAJ,EAAQ;AACN,mBAAO,KAAKmH,GAAL,CAASpE,GAAT,CAAa/C,EAAb,EAAiBsH,SAAjB,EAAP;AACD;;AACD,iBAAO/H,OAAO,CAACgI,MAAR,CAAe,uBAAf,CAAP;AACD;;;wCAEY;AACX,cAAIvH,EAAE,GAAGoH,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAT;;AACA,cAAIrH,EAAJ,EAAQ;AACN,mBAAO,KAAKmH,GAAL,CAASK,SAAT,CAAmBxH,EAAnB,EAAuBsH,SAAvB,EAAP;AACD;;AACD,iBAAO/H,OAAO,CAACgI,MAAR,CAAe,uBAAf,CAAP;AACD;;;;MApBiC,yD;;;uBAAvBL,c,EAAc,6H;AAAA,K;;;aAAdA,c;AAAc,eAAdA,cAAc;;;;;sEAAdA,c,EAAc;cAD1B;AAC0B,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QCKdO,W;;;;;AAWX,2BAAoB3C,cAApB,EAA4DqC,GAA5D,EAAkFO,QAAlF,EAA4G;AAAA;;AAAA;;AAC1G;AADkB,eAAA5C,cAAA,GAAAA,cAAA;AAAwC,eAAAqC,GAAA,GAAAA,GAAA;AAAsB,eAAAO,QAAA,GAAAA,QAAA;AATlF,eAAAC,OAAA,GAAkB,EAAlB,CAS4G,CAP5G;;AACQ,eAAAC,oBAAA,GAAuB,IAAI,oDAAJ,CAA6B,KAA7B,CAAvB;AAIA,eAAAC,UAAA,GAAa,KAAb;AAIN,eAAK1C,cAAL,GAAsB,OAAKyC,oBAAL,CAA0BE,YAA1B,EAAtB;;AACA,eAAK3C,cAAL,CAAoBF,SAApB,CAA8B,UAAAC,IAAI,EAAI;AACpC,iBAAK2C,UAAL,GAAkB3C,IAAlB;AACA6C,iBAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+B9C,IAA/B;AACD,SAHD,EAH0G,CAO1G;;;AACA,YAAI+C,SAAS,GAAGb,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAhB;;AACA,YAAIY,SAAJ,EAAe;AACb,cAAIC,OAAO,GAAGd,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAd;AACA,cAAIc,WAAW,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAlB;AACAN,iBAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BC,SAA/B,EAA0CE,WAA1C;;AACA,cAAI,CAACD,OAAD,GAAY,CAACD,SAAD,GAAa,IAAzB,GAAiCE,WAArC,EAAkD;AAChD,mBAAK5E,MAAL;AACD,WAFD,MAEO;AACL,mBAAK+E,eAAL;;AACA,mBAAKV,oBAAL,CAA0BW,IAA1B,CAA+B,IAA/B;AACD;AACF;;AAnByG;AAoB3G;;;;oCAEqB;;;;;;sDACb,KAAKpB,GAAL,CAASqB,YAAT,GAAwBlB,SAAxB,E;;;;;;;;;AACR;;;iCAEqBmB,K,EAA6B;;;;;;sDAC1C,KAAKtB,GAAL,CAASuB,KAAT,CAAeD,KAAf,EAA+CnB,SAA/C,E;;;;;;;;;AACR;;;8BAEkBmB,K,EAAsB;;;;;;;;AAC3B,2BAAM,KAAKtB,GAAL,CAASwB,IAAT,CAAcF,KAAd,EAAuCnB,SAAvC,EAAN;;;AAANsB,uB;;wBACDA,G;;;;;sDACIrJ,OAAO,CAACgI,MAAR,E;;;wBAEJqB,GAAG,CAACC,S;;;;;sDACAtJ,OAAO,CAACC,OAAR,CAAgB,KAAhB,C;;;AAET;AACA4H,gCAAY,CAAC0B,OAAb,CAAqB,YAArB,EAAmCF,GAAG,CAACC,SAAvC;AACAzB,gCAAY,CAAC0B,OAAb,CAAqB,SAArB,EAAgCF,GAAG,CAAC5I,EAApC;AACAoH,gCAAY,CAAC0B,OAAb,CAAqB,YAArB,EAAmCF,GAAG,CAACG,SAAJ,CAAclD,QAAd,EAAnC;AACImD,+B,GAAc,IAAIZ,IAAJ,GAAWC,OAAX,GAAqBxC,QAArB,E;AAClBuB,gCAAY,CAAC0B,OAAb,CAAqB,MAArB,EAA6BE,WAA7B;;AACA,yBAAKpB,oBAAL,CAA0BW,IAA1B,CAA+B,IAA/B;;AACA,yBAAKD,eAAL;sDACO/I,OAAO,CAACC,OAAR,CAAgB,IAAhB,C;;;;;;;;;AACR;;;0CAE+B;;;;;;;;AAEjB,2BAAM,KAAKkI,QAAL,CAAcxG,cAAd,EAAN;;;AAAPC,wB;AACN,yBAAK2D,cAAL,CAAoB/B,GAApB,CAAwB,YAAxB,EAAsCkG,IAAtC,CAA2C9H,IAA3C;;;;;;;;;AACD;;;iCAEkB;;;;;;;AACjBiG,gCAAY,CAAC8B,UAAb,CAAwB,YAAxB;AACA9B,gCAAY,CAAC8B,UAAb,CAAwB,SAAxB;AACA9B,gCAAY,CAAC8B,UAAb,CAAwB,YAAxB;AACIC,qB,GAAyB,gDAAG,KAAH,C;;AAC7B,yBAAKvB,oBAAL,CAA0BW,IAA1B,CAA+B,KAA/B;;sDACOY,CAAC,CAACC,KAAF,CAAQ,IAAR,EAAcC,KAAd,CAAoB,KAApB,EAA2B/B,SAA3B,E;;;;;;;;;AACR;;;qCAEsB;;;;;;AACrB,yBAAKM,oBAAL,CAA0BW,IAA1B,CAA+B,KAAKV,UAApC;;uDACO,KAAKA,U;;;;;;;;;AACb;;;;MA9E8B,yD;;;uBAApBJ,W,EAAW,uH,EAAA,yH,EAAA,uH;AAAA,K;;;aAAXA,W;AAAW,eAAXA,WAAW;;;;;sEAAXA,W,EAAW;cADvB;AACuB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;ACdxB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAKA;;;;;QAIa6B,uB;AAEX,yCAAc;AAAA;AAAG;;;;kCAEPC,O,EAA2BhB,I,EAAiB;AAEpDgB,iBAAO,GAAGA,OAAO,CAACC,KAAR,CAAc;AACtBC,sBAAU,EAAE;AACV,8BAAgB,kBADN;AAEV,gDAA2B,KAAKC,KAAhC;AAFU;AADU,WAAd,CAAV;AAMA,iBAAOnB,IAAI,CAACoB,MAAL,CAAYJ,OAAZ,CAAP;AACD;;;4BAEgB;AACf,iBAAOnC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAP;AACD;;;;;;;uBAjBUiC,uB;AAAuB,K;;;aAAvBA,uB;AAAuB,eAAvBA,uBAAuB;;;;;sEAAvBA,uB,EAAuB;cADnC;AACmC,Q;;;;;;;;;;;;;;;;;;;;ACTpC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAEsBM,W;AAEpB,6BAAc;AAAA;AAAG;;;;oCAEKxI,K,EAAY;AAChC,cAAIyI,gBAAgB,GAAGzI,KAAK,CAAC0I,OAAN,CAAc/G,GAAd,CAAkB,mBAAlB,CAAvB,CADgC,CAGhC;;AACA,cAAI8G,gBAAJ,EAAsB;AACpB,mBAAO,oEAAiBA,gBAAjB,CAAP;AACD,WAN+B,CAQhC;;;AACA,cAAIE,gBAAgB,GAAW,EAA/B;;AACA,cAAI3I,KAAK,CAACA,KAAV,EAAiB;AACf,gBAAI4I,WAAW,GAAG5I,KAAK,CAACA,KAAxB;;AAEA,gBAAI,CAAC4I,WAAW,CAACC,IAAjB,EAAuB;AACrB,mBAAK,IAAIC,GAAT,IAAgBF,WAAhB,EAA6B;AAC3B,oBAAIA,WAAW,CAACE,GAAD,CAAf,EACEH,gBAAgB,IAAIC,WAAW,CAACE,GAAD,CAAX,GAAmB,IAAvC;AACH;AACF;;AAEDH,4BAAgB,GAAGA,gBAAgB,GAAG,KAAK,SAAL,GAAYA,gBAAlD;AACA,mBAAO,oEAAiBA,gBAAgB,IAAI,cAArC,CAAP;AACD,WAtB+B,CAwBhC;;;AACA,iBAAO,oEAAiB3I,KAAK,CAACC,OAAvB,CAAP;AACD;;;;;;;;;;;;;;;;;;;;;AChCH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;;;QAGa8I,a;;;;;;;4BAIgB;AACzB,iBAAOA,aAAa,CAACC,OAArB;AACD,S;0BAEwBpH,K,EAAe;AACtCmH,uBAAa,CAACC,OAAd,GAAwBpH,KAAxB;AACD;;;;;;AARc,kBAAAoH,OAAA,GAAkBC,MAAM,CAACpG,QAAP,CAAgBqG,MAAlC;;;;;;;;;;;;;;;;ACLjB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAEA;;;;;QAIaC,c;AADb;AAAA;;AAGY,aAAAC,SAAA,GAAiD,EAAjD;AAaX;;;;4BAXcC,E,EAAU;AACjB1C,iBAAO,CAACC,GAAR,uBAA2ByC,EAA3B;;AACA,cAAI,CAAC,KAAKD,SAAL,CAAeC,EAAf,CAAL,EAAyB;AACvB1C,mBAAO,CAACC,GAAR,uBAA2ByC,EAA3B;AACA,iBAAKD,SAAL,CAAeC,EAAf,IAAqB,IAAI,0DAAJ,EAArB;AACD,WAHD,MAGO;AACL1C,mBAAO,CAACC,GAAR,uBAA2ByC,EAA3B;AACD;;AACD,iBAAO,KAAKD,SAAL,CAAeC,EAAf,CAAP;AACH;;;;;;;uBAbQF,c;AAAc,K;;;aAAdA,c;AAAc,eAAdA,cAAc;;;;;sEAAdA,c,EAAc;cAD1B;AAC0B,Q;;;;;;;;;;;;;;;;;;ACN3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,O,CAAA;AAMA;AAEA;;;;;;;;;;;;;;;;;;ACRA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAA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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\r\nimport { RouterModule } from '@angular/router';\r\nimport { LocationStrategy, HashLocationStrategy, Location } from '@angular/common';\r\n\r\n//Angular Material Components\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\n\r\nimport { AuthGuard } from './guards/index';\r\n\r\nimport * as components from './components/index';\r\nimport * as services from './services/index';\r\n\r\nimport { routesConfig } from './configurations/routes';\r\nimport { TokenInterceptorService, API_BASE_URL } from './services/index';\r\n\r\n// The admin part is separated to it's own module\r\nimport { AdminModule } from './modules/admin/admin.module';\r\n\r\nexport function getBaseUrl(): string {\r\n  return services.ConfigService.apiURI;\r\n}\r\n\r\nconst material = [MatButtonModule, MatCheckboxModule, MatCardModule, MatTabsModule];\r\n\r\n@NgModule({\r\n  declarations: [ \r\n    components.SiteRootComponent, \r\n    components.SiteInfoComponent, \r\n    components.DashboardComponent,\r\n    components.LoginFormComponent, \r\n    components.LogoutFormComponent, \r\n    components.RegistrationFormComponent,\r\n    components.ProfileFormComponent\r\n  ],\r\n  imports: [\r\n    AdminModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    RouterModule.forRoot(routesConfig),\r\n    BrowserModule,    \r\n    HttpClientModule,\r\n    ...material,\r\n    BrowserAnimationsModule,\r\n    MatCheckboxModule,\r\n    MatCheckboxModule,\r\n    MatButtonModule,\r\n    MatInputModule,\r\n    MatAutocompleteModule,\r\n    MatDatepickerModule,\r\n    MatFormFieldModule,\r\n    MatRadioModule,\r\n    MatSelectModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatMenuModule,\r\n    MatSidenavModule,\r\n    MatToolbarModule,\r\n    MatListModule,\r\n    MatGridListModule,\r\n    MatCardModule,\r\n    MatStepperModule,\r\n    MatTabsModule,\r\n    MatExpansionModule,\r\n    MatButtonToggleModule,\r\n    MatChipsModule,\r\n    MatIconModule,\r\n    MatProgressSpinnerModule,\r\n    MatProgressBarModule,\r\n    MatDialogModule,\r\n    MatTooltipModule,\r\n    MatSnackBarModule,\r\n    MatTableModule,\r\n    MatSortModule,\r\n    MatPaginatorModule\r\n  ],\r\n  providers: [\r\n    // router config\r\n    Location,\r\n    { provide: LocationStrategy, useClass: HashLocationStrategy },\r\n    // handle Bearer token for all requests\r\n    { provide: HTTP_INTERCEPTORS, useClass: TokenInterceptorService, multi: true },\r\n    // Nswag's generated code can be configured here\r\n    { provide: API_BASE_URL, useFactory: getBaseUrl },\r\n    // regular demo data\r\n    services.MachineDataService,\r\n    // Account data, user details\r\n    services.AccountService,\r\n    // Login/Logout\r\n    services.AuthService,\r\n    // generic publish/subscribe\r\n    services.EmitterService,\r\n    // APIs to server\r\n    services.ApiAccounts, services.ApiAuth, services.ApiMachines,\r\n    // prevent routes for non-authenticated users\r\n    AuthGuard\r\n  ],\r\n  bootstrap: [ components.SiteRootComponent ]\r\n})\r\nexport class AppModule {\r\n\r\n}","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { AccountService, MachineDataService, UserViewModel, MachineViewModel } from '../../services/index';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: 'dashboard.component.html',\r\n  styleUrls: ['dashboard.component.scss']\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n\r\n  user: UserViewModel;\r\n  machines: MachineViewModel[];\r\n  error: any;\r\n\r\n  errors: string;\r\n  isRequesting: boolean;\r\n\r\n  constructor(private accountService: AccountService, private machineService: MachineDataService) {\r\n    this.machines = [];\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Get account information\r\n    this.accountService.getUserDetails()\r\n      .then(user => this.user = user)\r\n      .catch(error => this.error = error.message);\r\n    this.machineService.getMachines()\r\n      .then(machines => this.machines = machines)\r\n      .catch(error => this.error = error.message);\r\n  }\r\n\r\n}\r\n","<h2>Dashboard</h2>\r\n<mat-card *ngIf=\"error\">{{error}}</mat-card>\r\n<div fxLayout fxLayout.xs=\"column\" fxFlexAlign=\"center\" fxLayoutAlign=\"center\" fxLayoutGap=\"20px\" fxLayoutGap.xs=\"0px\">\r\n  <div fxFlex=\"40%\" *ngIf=\"user; else noUser\">\r\n    <mat-card class=\"example-card\">\r\n      <mat-card-header>\r\n        <div mat-card-avatar class=\"example-header-image\"></div>\r\n        <mat-card-title>User Data</mat-card-title>\r\n        <mat-card-subtitle>Profile Info and Claims</mat-card-subtitle>\r\n      </mat-card-header>\r\n      <img mat-card-image src=\"assets/images/slider1.jpg\" />\r\n      <mat-card-content>\r\n        <dl>\r\n          <dt>User Name</dt>\r\n          <dd>{{ user.userName }}</dd>\r\n          <dt>E-Mail</dt>\r\n          <dd>{{ user.email }}</dd>\r\n        </dl>\r\n      </mat-card-content>\r\n      <mat-card-actions>\r\n        <button mat-button>DETAILS</button>\r\n        <button mat-button>MORE...</button>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n  </div>\r\n  <div fxFlex=\"40%\" *ngIf=\"machines; else noMachines\">\r\n    <mat-card class=\"example-card\" *ngIf=\"machines; else noMachines\">\r\n      <mat-card-header>\r\n        <div mat-card-avatar class=\"example-header-image\"></div>\r\n        <mat-card-title>Machine Data</mat-card-title>\r\n        <mat-card-subtitle>Data from Demo Database</mat-card-subtitle>\r\n      </mat-card-header>\r\n      <img mat-card-image src=\"assets/images/slider2.jpg\" />\r\n      <mat-card-content>\r\n        <dl>\r\n          <dt>Number of Machines</dt>\r\n          <dd>{{ machines.length }}</dd>\r\n          <dt>List of Machines</dt>\r\n          <dd>\r\n            <ul>\r\n              <li *ngFor=\"let machine of machines\">\r\n                {{ machine.name }} ( {{ machine.location }} )\r\n              </li>\r\n            </ul>\r\n          </dd>\r\n        </dl>\r\n      </mat-card-content>\r\n      <mat-card-actions>\r\n        <button mat-button>MANAGE</button>\r\n        <button mat-button>MORE...</button>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n  </div>\r\n  <ng-template #noUser>No User - please logon</ng-template>\r\n  <ng-template #noMachines>No Machines - please logon</ng-template>\r\n</div>","// Globally used pages directly loaded by router\r\n// All working parts are in separate modules loaded on request\r\nexport * from './root/site-root.component';\r\nexport * from './info/site-info.component';\r\nexport * from './dashboard/dashboard.component';\r\nexport * from './login/login-form.component'; \r\nexport * from './logout/logout-form.component'; \r\nexport * from './registration/registration-form.component';\r\nexport * from './profile/profile-form.component';\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'site-info', \r\n  templateUrl: 'site-info.component.html'\r\n})\r\nexport class SiteInfoComponent {\r\n\r\n\r\n  constructor() {\r\n  }\r\n\r\n\r\n}\r\n","<div class=\"alert alert-info\">\r\n  There are three pre-defined users:\r\n  <ul>\r\n    <li>Weird Guest (Login: weird@guest.com, Password: p@ssw0rd)</li>\r\n    <li>Doris Demo (Login: doris@demo.com, Password: p@ssw0rd)</li>\r\n    <li>Andy Admin (Login: andy@admin.com, Password: p@ssw0rd)</li>\r\n  </ul>\r\n  There are three roles defined, each role has one member:\r\n  <ul>\r\n    <li>Guest (Member: Weird Guest)</li>\r\n    <li>User (Member: Doris Demo)</li>\r\n    <li>Admin (Member: Andy Admin)</li>\r\n  </ul>\r\n  <p>There is one Policy as a User claim defined:</p> <pre>{{ '{' }}\"role\": \"api_access\" {{ '}' }}</pre>\r\n  <p>The members \"Doris Demo\" and \"Andy Admin\" have this claim.</p>\r\n  <p>Weird Guest has no claim and hence cannot access the backend API.</p>\r\n</div>\r\n<div class=\"alert alert-danger\">\r\n  <p>Login, Register and this Info page can be opened by all users. </p>\r\n  <p>A Guard is protecting the dashboard from user not properly logged on. If you click on \"Dashboard\" as an anonymous user \r\n  your're are going to be redirected to the login form.</p>\r\n</div>\r\n","<mat-card>\r\n  <mat-card-content>\r\n    <mat-list *ngIf=\"providers\">\r\n      <mat-list-item *ngFor=\"let provider of providers\">\r\n        <mat-icon matListIcon>folder</mat-icon>\r\n        <h3 matLine> {{provider.name}} </h3>\r\n        <p matLine>\r\n          <span> {{provider.displayname}} </span>\r\n        </p>\r\n      </mat-list-item>\r\n    </mat-list>\r\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" autocomplete=\"off\" spellcheck=\"false\">\r\n      <h2>Log In</h2>\r\n      <mat-error *ngIf=\"loginInvalid\">\r\n        The username and password were not recognised\r\n      </mat-error>\r\n      <mat-form-field appearance=\"legacy\">\r\n        <mat-label>User Name (eMail)</mat-label>\r\n        <input matInput placeholder=\"Email\" formControlName=\"userName\">\r\n        <mat-error>\r\n          Please provide a valid email address\r\n        </mat-error>\r\n      </mat-form-field>\r\n      <mat-form-field appearance=\"legacy\">\r\n        <mat-label>Password</mat-label>\r\n        <input matInput type=\"password\" placeholder=\"Password\" formControlName=\"password\">\r\n        <mat-error>\r\n          Please provide a valid password\r\n        </mat-error>\r\n      </mat-form-field>\r\n      <button mat-raised-button color=\"primary\">Login</button>\r\n      <div *ngIf=\"formSubmitAttempt\">Logging in...</div>\r\n    </form>\r\n  </mat-card-content>\r\n</mat-card>\r\n<mat-card *ngIf=\"errors\" role=\"alert\" color=\"red\">\r\n  <mat-card-title>An error occured</mat-card-title>\r\n  {{errors|json}}  \r\n</mat-card>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\n\r\nimport { AuthService, ILogonViewModel, IProviderViewModel } from '../../services/index';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'login-form',\r\n  templateUrl: 'login-form.component.html',\r\n  styleUrls: ['login-form.component.scss']\r\n})\r\nexport class LoginFormComponent implements OnInit {\r\n\r\n  public form: FormGroup;\r\n  public loginInvalid: boolean;\r\n  public formSubmitAttempt: boolean;\r\n  public errors: string;\r\n  private returnUrl: string;\r\n  public providers: IProviderViewModel[];\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private authService: AuthService\r\n  ) {\r\n  }\r\n\r\n  async ngOnInit() {\r\n    this.returnUrl = this.route.snapshot.queryParams.returnUrl || '/dashboard';\r\n\r\n    this.form = this.fb.group({\r\n      userName: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required]]\r\n    });\r\n\r\n    if (await this.authService.isLoggedIn()) {\r\n      await this.router.navigate([this.returnUrl]);\r\n    }\r\n    this.providers = await this.authService.providers();\r\n  }\r\n\r\n  async onSubmit() {\r\n    this.loginInvalid = false;\r\n    this.formSubmitAttempt = true;\r\n    if (this.form.valid) {\r\n      try {\r\n        const logonModel: ILogonViewModel = {\r\n          userName: this.form.get('userName').value,\r\n          password: this.form.get('password').value\r\n        };\r\n        await this.authService.login(logonModel);\r\n        this.formSubmitAttempt = false;\r\n      } catch (err) {\r\n        this.loginInvalid = true;\r\n        this.errors = err;\r\n      }\r\n    } else {\r\n      this.formSubmitAttempt = false;\r\n    }\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, AfterViewInit, ChangeDetectorRef } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\n\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { AuthService } from '../../services/index';\r\n\r\n@Component({\r\n  selector: 'logout-form',\r\n  templateUrl: 'logout-form.component.html'\r\n})\r\nexport class LogoutFormComponent implements OnInit, AfterViewInit {\r\n\r\n  errors: string;\r\n  loggedOut: boolean = false;\r\n\r\n  constructor(private authService: AuthService, private cd: ChangeDetectorRef) {\r\n    // function returns a delayed answer to simulate something serious\r\n    this.authService.logout().then(() => this.loggedOut = true);\r\n  }\r\n\r\n  ngOnInit() {\r\n    // this is an alternative way to get the information immediately, no weird delay \r\n    // this.authService.authNavStatus$.subscribe(data => this.loggedOut = data);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.cd.detectChanges();\r\n  }\r\n\r\n\r\n}\r\n","<div class=\"row\">\r\n\t<div class=\"col-md-6\">\r\n\t\t<div class=\"card\">\r\n\t\t\t<div class=\"card-block\">\r\n\r\n\t\t\t\t<h4>Logout</h4>\r\n\r\n\t\t\t\t<div class=\"alert alert-warning\" *ngIf=\"!loggedOut\">You're about logging out.</div>\r\n\r\n\t\t\t\t<div class=\"alert alert-success\" *ngIf=\"loggedOut\">You're successfully being logged out.</div>\r\n\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { AccountService, ClaimViewModel } from '../../services/index';\r\n\r\n@Component({\r\n  selector: 'profile-form',\r\n  templateUrl: './profile-form.component.html'\r\n})\r\nexport class ProfileFormComponent implements OnInit {\r\n\r\n  errors: string;\r\n  claims: ClaimViewModel[];\r\n\r\n  constructor(private accountService: AccountService) {\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.accountService.getUserClaims().then(claims => this.claims = claims);\r\n  }\r\n\r\n  setProfile() {\r\n    // TODO: Write profile\r\n  }\r\n}\r\n","{{ claims | json }}","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AuthService, IRegistrationViewModel } from '../../services/index';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'registration-form',\r\n  templateUrl: './registration-form.component.html',\r\n  styleUrls: ['registration-form.component.scss']\r\n})\r\nexport class RegistrationFormComponent implements OnInit {\r\n\r\n  public form: FormGroup;\r\n  public errors: string;\r\n  public isRequesting: boolean;\r\n  public submitted: boolean = false;\r\n  public hide = true;\r\n\r\n  constructor(private fb: FormBuilder, private authService: AuthService, private router: Router) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.form = this.fb.group({\r\n      firstName: ['', Validators.required],\r\n      lastName: ['', Validators.required],\r\n      email: ['', Validators.required, Validators.email],\r\n      password: ['', Validators.required],\r\n      location: [''],\r\n    });\r\n\r\n  }\r\n\r\n  registerUser() {\r\n    this.submitted = true;\r\n    this.isRequesting = true;\r\n    this.errors = '';\r\n    if (this.form.valid) {\r\n      const registerModel: IRegistrationViewModel = {\r\n        firstName: this.form.get('firstName').value,\r\n        lastName: this.form.get('lastName').value,\r\n        email: this.form.get('email').value,\r\n        location: this.form.get('location').value,\r\n        password: this.form.get('password').value\r\n      };\r\n      this.authService.register(registerModel)\r\n        .then(() => this.isRequesting = false)\r\n        .then(\r\n          result => {\r\n            if (result) {\r\n              this.router.navigate(['/login'], { queryParams: { brandNew: true, email: registerModel.email } });\r\n            }\r\n          },\r\n          errors => this.errors = errors.error ? Object.values(errors.error).join('') : JSON.stringify(errors));\r\n    }\r\n  }\r\n}\r\n","<mat-card>\r\n  <mat-card-title>Create your account</mat-card-title>\r\n  <mat-card-content>\r\n\r\n    <form [formGroup]=\"form\" novalidate (ngSubmit)=\"registerUser()\" autocomplete=\"off\" spellcheck=\"false\">\r\n\r\n      <mat-form-field appearance=\"legacy\">\r\n        <mat-label>First Name</mat-label>\r\n        <input matInput id=\"firstName\" type=\"text\" formControlName=\"firstName\" placeholder=\"Your first name\" tmFocus>\r\n        <mat-error>Please enter a name</mat-error>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field appearance=\"legacy\">\r\n        <mat-label>Last Name</mat-label>\r\n        <input matInput id=\"lastName\" type=\"text\" formControlName=\"lastName\" placeholder=\"Your last name\">\r\n        <mat-error>Please enter a name</mat-error>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field appearance=\"legacy\">\r\n        <mat-label>E-Mail (used as logon)</mat-label>\r\n        <input matInput id=\"email\" type=\"text\" formControlName=\"email\" placeholder=\"Email\">\r\n        <mat-error>Please enter a valid email</mat-error>\r\n        <mat-hint>This is used as logon id</mat-hint>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field appearance=\"legacy\">\r\n        <mat-label>Password</mat-label>\r\n        <input matInput id=\"password\" type=\"password\" formControlName=\"password\" placeholder=\"Password\">\r\n        <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hide\">\r\n          <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n        </button>\r\n        <mat-error>Please enter initial password</mat-error>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field appearance=\"legacy\">\r\n        <mat-label>Location (City)</mat-label>\r\n        <input matInput id=\"location\" type=\"text\" formControlName=\"location\" placeholder=\"Location\" >\r\n        <mat-hint>Just an additional profile information</mat-hint>\r\n      </mat-form-field>\r\n\r\n      <button mat-raised-button color=\"primary\" [disabled]=\"form.invalid || isRequesting\">Sign Up</button>\r\n      <div *ngIf=\"isRequesting\">Registering...</div>\r\n\r\n    </form>\r\n  </mat-card-content>\r\n</mat-card>\r\n<mat-card *ngIf=\"errors\" role=\"alert\" color=\"red\">\r\n  <mat-card-title>An error occured</mat-card-title>\r\n  {{errors}}\r\n</mat-card>","<div fxLayout fxLayoutAlign=\"center center\">\r\n  <h1>Professional App Foundation</h1>\r\n  <span class=\"pull-right\" *ngIf=\"isLoggedIn\">Welcome, {{ userName }}</span>\r\n  <nav mat-tab-nav-bar>\r\n    <a mat-tab-link\r\n       *ngIf=\"!isLoggedIn\"\r\n       routerLink=\"/login\"\r\n       routerLinkActive #rla=\"routerLinkActive\"\r\n       [active]=\"rla.isActive\">\r\n      Login\r\n    </a>\r\n    <a mat-tab-link\r\n       *ngIf=\"isLoggedIn\"\r\n       routerLink=\"/logout\"\r\n       routerLinkActive #rla=\"routerLinkActive\"\r\n       [active]=\"rla.isActive\">\r\n      Logout\r\n    </a>\r\n    <a mat-tab-link\r\n       *ngFor=\"let link of navLinks\"\r\n       [routerLink]=\"link.path\"\r\n       routerLinkActive #rla=\"routerLinkActive\"\r\n       [active]=\"rla.isActive\">\r\n      {{link.label}}\r\n    </a>\r\n    <a [matMenuTriggerFor]=\"appMenu\"\r\n       mat-tab-link\r\n       [routerLink]=\"['/admin']\"\r\n       routerLinkActive #rla=\"routerLinkActive\"\r\n       [active]=\"rla.isActive\">\r\n      User Administration\r\n    </a>\r\n    <mat-menu #appMenu=\"matMenu\">\r\n      <button mat-menu-item *ngFor=\"let link of navLinksLazy\" [routerLink]=\"['/admin', { outlets: { manager: link.path }}]\"> {{ link.label }}</button>\r\n    </mat-menu>\r\n  </nav>  \r\n  <div class=\"container\">\r\n    <router-outlet></router-outlet>\r\n    <router-outlet name=\"manager\"></router-outlet>\r\n  </div>\r\n</div>","import { Component, OnInit, AfterViewInit, ChangeDetectorRef } from '@angular/core';\r\nimport { AuthService, EmitterService } from '../../services';\r\nimport { Router, LoadChildrenCallback } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'site-root', \r\n  templateUrl: 'site-root.component.html',\r\n  styleUrls: ['site-root.component.scss']\r\n})\r\nexport class SiteRootComponent implements OnInit, AfterViewInit {\r\n\r\n  isLoggedIn: boolean = false;\r\n  userName: string;\r\n  navLinks: { path: string, label: string }[] = [];\r\n  navLinksLazy: { path: string, label: string }[] = [];\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private emitterService: EmitterService,\r\n    private router: Router,\r\n    private cd: ChangeDetectorRef\r\n  ) {\r\n    this.emitterService.get('USER_LOGON').subscribe(data => this.userName = data.userName || data.email);\r\n    this.authService.authNavStatus$.subscribe(data => this.isLoggedIn = data);\r\n  }\r\n\r\n  async ngOnInit() {\r\n    this.isLoggedIn = await this.authService.isLoggedIn();    \r\n    this.navLinks.push(\r\n      ...(this.router.config\r\n        .filter(r => r.data && r.data.mainmenu === true)\r\n        .map(r => {\r\n          return {\r\n            path: r.path,\r\n            label: r.data.title.toString()\r\n          }\r\n        }))\r\n    );\r\n    const children = this.router.config.filter(r => r.outlet === 'manager');\r\n    this.navLinksLazy = children.map(c => {\r\n      return {\r\n        path: c.path,\r\n        label: c.data.title.toString()\r\n      }\r\n    });    \r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.cd.detectChanges();\r\n  }\r\n\r\n}\r\n","import { Routes } from '@angular/router';\r\n\r\nimport * as components from '../components/index';\r\nimport { AuthGuard } from '../guards/index';\r\n\r\nexport const routesConfig: Routes = [\r\n  {\r\n    path: '',\r\n    redirectTo: 'info',\r\n    pathMatch: 'full'\r\n  },\r\n  {\r\n    path: 'login/:email',\r\n    component: components.LoginFormComponent,\r\n    data: {\r\n      title: 'User Login'\r\n    }\r\n  },\r\n  {\r\n    path: 'login',\r\n    component: components.LoginFormComponent,\r\n    data: {\r\n      title: 'User Login'\r\n    }\r\n  },\r\n  {\r\n    path: 'logout',\r\n    component: components.LogoutFormComponent,\r\n    data: {\r\n      title: 'User Logout'\r\n    }\r\n  },\r\n  {\r\n    path: 'register',\r\n    component: components.RegistrationFormComponent,\r\n    data: {\r\n      mainmenu: true,\r\n      title: 'User Registration'\r\n    }\r\n  },\r\n  {\r\n    path: 'info',\r\n    component: components.SiteInfoComponent,\r\n    data: {\r\n      mainmenu: true,\r\n      title: 'Site Info'\r\n    }\r\n  },\r\n  {\r\n    path: 'dashboard',\r\n    component: components.DashboardComponent,\r\n    canActivate: [AuthGuard],\r\n    data: {\r\n      mainmenu: true,\r\n      title: 'Dashboard',\r\n      role: 'User'\r\n    }\r\n  },\r\n  {\r\n    path: 'admin',\r\n    loadChildren: () => import('../modules/admin/admin.module').then(m => m.AdminModule),\r\n    data: {\r\n      mainmenu: false,\r\n      role: 'Admin'\r\n    }\r\n  }\r\n];\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { Router, CanActivate } from '@angular/router';\r\nimport { AuthService } from '../services/index';\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private authService: AuthService,private router: Router) {}\r\n\r\n  async canActivate() {\r\n    const loggedIn = await this.authService.isLoggedIn();\r\n    if (!loggedIn)\r\n    {\r\n       this.router.navigate(['/login']);\r\n       return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}","export * from './auth.guard';\r\nexport * from './storage.guard';\r\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate } from '@angular/router';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../services';\r\n\r\n@Injectable()\r\nexport class StorageGuard implements CanActivate {\r\n\r\n  constructor(private router: Router, private authService: AuthService) { }\r\n\r\n  canActivate() {\r\n    if (this.authService.isLoggedIn) {\r\n      return true;\r\n    }\r\n\r\n    this.router.navigate(['/login']);\r\n    return false;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\nimport { routesConfig } from './configurations/routes';\r\n\r\nimport * as components from './components/index';\r\n\r\n@NgModule({\r\n  declarations: [ \r\n    components.AdminRootComponent,\r\n    components.AdminUsersComponent,\r\n    components.AdminRolesComponent,\r\n    components.AdminClaimsComponent\r\n  ],\r\n  imports: [\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    CommonModule,    \r\n    HttpClientModule,\r\n    RouterModule.forChild(routesConfig)\r\n  ],\r\n  exports: [\r\n    components.AdminRootComponent\r\n  ],\r\n  providers: []\r\n})\r\nexport class AdminModule {\r\n\r\n}","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'admin-claims', \r\n  templateUrl: 'admin-claims.component.html',\r\n  styleUrls: ['admin-claims.component.scss']\r\n})\r\nexport class AdminClaimsComponent implements OnInit {\r\n\r\n\r\n  constructor() {\r\n    \r\n  }\r\n\r\n  ngOnInit(): void {\r\n        \r\n  }\r\n\r\n}\r\n","<h3>Claims Manager</h3>","// Globally used pages directly loaded by router\r\n// All working parts are in separate modules loaded on request\r\nexport * from './root/admin-root.component';\r\nexport * from './roles/admin-roles.component';\r\nexport * from './users/admin-users.component';\r\nexport * from './claims/admin-claims.component';\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'admin-roles', \r\n  templateUrl: 'admin-roles.component.html',\r\n  styleUrls: ['admin-roles.component.scss']\r\n})\r\nexport class AdminRolesComponent implements OnInit {\r\n\r\n\r\n  constructor() {\r\n    \r\n  }\r\n\r\n  ngOnInit(): void {\r\n        \r\n  }\r\n\r\n}\r\n","<h3>Roles Manager</h3>","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'admin-root', \r\n  templateUrl: 'admin-root.component.html',\r\n  styleUrls: ['admin-root.component.scss']\r\n})\r\nexport class AdminRootComponent implements OnInit {\r\n\r\n\r\n  constructor() {\r\n    \r\n  }\r\n\r\n  ngOnInit(): void {\r\n        \r\n  }\r\n\r\n}\r\n","<h2>Administration Center</h2>\r\n<hr/>\r\n<div class=\"alert alert-info\">\r\n  Manage users, roles, and claims here. The backend has hardwired protection for two roles:\r\n  <ul>\r\n    <li>'admin': Administrative access to this module</li>\r\n    <li>'user': Access to all demo data</li>\r\n  </ul>\r\n  The backend also provides additional protection by using the claim 'role=api_access'. All users that need\r\n  backend API access need to carry this claim.\r\n</div>\r\n<hr/>","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'admin-users', \r\n  templateUrl: 'admin-users.component.html',\r\n  styleUrls: ['admin-users.component.scss']\r\n})\r\nexport class AdminUsersComponent implements OnInit {\r\n\r\n\r\n  constructor() {\r\n    \r\n  }\r\n\r\n  ngOnInit(): void {\r\n        \r\n  }\r\n\r\n}\r\n","<h3>User Manager</h3>","import { Routes } from '@angular/router';\r\n\r\nimport * as components from '../components/index';\r\nimport { AuthGuard } from '../../../guards/auth.guard';\r\n\r\nexport const routesConfig: Routes = [\r\n  {\r\n    path: '',\r\n    canActivate: [AuthGuard],\r\n    component: components.AdminRootComponent,\r\n    data: {\r\n      title: 'User Administration'\r\n    }\r\n  },\r\n  {\r\n    path: 'users',\r\n    canActivate: [AuthGuard],\r\n    component: components.AdminUsersComponent,\r\n    outlet: 'manager',\r\n    data: {\r\n      title: 'User Manager'\r\n    }\r\n  },{\r\n    path: 'roles',\r\n    canActivate: [AuthGuard],\r\n    component: components.AdminRolesComponent,\r\n    outlet: 'manager',\r\n    data: {\r\n      title: 'Roles Manager'\r\n    }\r\n  },{\r\n    path: 'claims',\r\n    canActivate: [AuthGuard],\r\n    component: components.AdminClaimsComponent,\r\n    outlet: 'manager',\r\n    data: {\r\n      title: 'Claims Manager'\r\n    }\r\n  }\r\n];\r\n\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseService } from './base.service';\r\n\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/toPromise';\r\nimport { ApiAccounts, UserViewModel, ClaimViewModel } from './lib/frontendapi.services';\r\n\r\n@Injectable()\r\nexport class AccountService extends BaseService {\r\n\r\n  constructor(private api: ApiAccounts) {\r\n    super();\r\n  }\r\n\r\n  getUserDetails(): Promise<UserViewModel> {\r\n    let id = localStorage.getItem('user_id');\r\n    if (id) {\r\n      return this.api.get(id).toPromise<UserViewModel>();\r\n    }\r\n    return Promise.reject('No User, please Logon');\r\n  }\r\n\r\n  getUserClaims(): Promise<ClaimViewModel[]> {\r\n    let id = localStorage.getItem('user_id');\r\n    if (id) {\r\n      return this.api.getClaims(id).toPromise<ClaimViewModel[]>();\r\n    }\r\n    return Promise.reject('No User, please Logon');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseService } from \"./base.service\";\r\n\r\nimport { of, Observable, BehaviorSubject } from 'rxjs';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/mapTo';\r\nimport 'rxjs/add/operator/delay';\r\nimport 'rxjs/add/operator/toPromise';\r\nimport { EmitterService } from './emitter.service';\r\nimport { AccountService } from './account.service';\r\nimport { ApiAuth, ITokenResponseViewModel, IRegistrationViewModel, ILogonViewModel, RegistrationViewModel, LogonViewModel, IProviderViewModel } from './lib/frontendapi.services';\r\n\r\n@Injectable()\r\nexport class AuthService extends BaseService {\r\n\r\n  baseUrl: string = '';\r\n\r\n  // Observable navItem source\r\n  private _authNavStatusSource = new BehaviorSubject<boolean>(false);\r\n  // Observable navItem stream\r\n  public authNavStatus$: Observable<boolean>;\r\n\r\n  private __loggedIn = false;\r\n\r\n  constructor(private emitterService: EmitterService, private api: ApiAuth, private accounts: AccountService) {\r\n    super();\r\n    this.authNavStatus$ = this._authNavStatusSource.asObservable();\r\n    this.authNavStatus$.subscribe(data => {\r\n      this.__loggedIn = data;\r\n      console.log('AuthNav Changed', data);\r\n    });\r\n    // check for an old token\r\n    let lastToken = localStorage.getItem('expires_in');\r\n    if (lastToken) {\r\n      let oldTime = localStorage.getItem('time');\r\n      let compareTime = new Date().getTime();\r\n      console.log('Last Expires In', lastToken, compareTime);\r\n      if (+oldTime + (+lastToken * 1000) < compareTime) {\r\n        this.logout();\r\n      } else {\r\n        this.informListeners();\r\n        this._authNavStatusSource.next(true);\r\n      }\r\n    }\r\n  }\r\n\r\n  public async providers(): Promise<IProviderViewModel[]> {\r\n    return this.api.getProviders().toPromise();\r\n  }\r\n\r\n  public async register(model: IRegistrationViewModel): Promise<string> {\r\n    return this.api.post2(model as RegistrationViewModel).toPromise<string>();\r\n  }\r\n\r\n  public async login(model: ILogonViewModel): Promise<boolean> {\r\n    const res = await this.api.post(model as LogonViewModel).toPromise<ITokenResponseViewModel>();\r\n    if (!res) {\r\n      return Promise.reject();\r\n    }\r\n    if (!res.authToken) {\r\n      return Promise.resolve(false);\r\n    }\r\n    // receive the token and store for all upcoming requests\r\n    localStorage.setItem('auth_token', res.authToken);\r\n    localStorage.setItem('user_id', res.id);\r\n    localStorage.setItem('expires_in', res.expiresIn.toString());\r\n    let currentTime = new Date().getTime().toString();\r\n    localStorage.setItem('time', currentTime);\r\n    this._authNavStatusSource.next(true);\r\n    this.informListeners();\r\n    return Promise.resolve(true);\r\n  }\r\n\r\n  private async informListeners() {\r\n    // pull user data and provide through emitter\r\n    const user = await this.accounts.getUserDetails();\r\n    this.emitterService.get('USER_LOGON').emit(user);\r\n  }\r\n\r\n  public async logout(): Promise<boolean> {\r\n    localStorage.removeItem('auth_token');\r\n    localStorage.removeItem('user_id');\r\n    localStorage.removeItem('expires_in');\r\n    let o: Observable<boolean> = of(false);\r\n    this._authNavStatusSource.next(false);\r\n    return o.delay(2000).mapTo(false).toPromise();\r\n  }\r\n\r\n  public async isLoggedIn(): Promise<boolean> {\r\n    this._authNavStatusSource.next(this.__loggedIn);\r\n    return this.__loggedIn;\r\n  }\r\n\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\n/**\r\n * Adds the bearer token and the global JSON support, the latter header is required by ASP.NET Core WebAPI\r\n * */\r\n@Injectable()\r\nexport class TokenInterceptorService implements HttpInterceptor {\r\n\r\n  constructor() { }\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n    request = request.clone({\r\n      setHeaders: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${this.token}`\r\n      }\r\n    });\r\n    return next.handle(request);\r\n  }\r\n\r\n  private get token(): string {\r\n    return localStorage.getItem('auth_token');\r\n  }\r\n\r\n}","import { Observable } from 'rxjs/Observable';\r\n\r\nexport abstract class BaseService {\r\n\r\n  constructor() { }\r\n\r\n  protected handleError(error: any) {\r\n    var applicationError = error.headers.get('Application-Error');\r\n\r\n    // is applicationError \r\n    if (applicationError) {\r\n      return Observable.throw(applicationError);\r\n    }\r\n\r\n    // has modelState Error\r\n    var modelStateErrors: string = '';\r\n    if (error.error) {\r\n      var serverError = error.error;\r\n\r\n      if (!serverError.type) {\r\n        for (var key in serverError) {\r\n          if (serverError[key])\r\n            modelStateErrors += serverError[key] + '\\n';\r\n        }\r\n      }\r\n\r\n      modelStateErrors = modelStateErrors = '' ? null : modelStateErrors;\r\n      return Observable.throw(modelStateErrors || 'Server error');\r\n    }\r\n\r\n    // is regular message from infrastructure is somehow unexpected\r\n    return Observable.throw(error.message);\r\n  }\r\n}","/**\r\n * Store the API's base URL in case we need to change it from default origin.\r\n * */\r\nexport class ConfigService {\r\n\r\n  private static _apiURI: string = window.location.origin;\r\n\r\n  public static get apiURI() {\r\n    return ConfigService._apiURI;\r\n  }\r\n\r\n  public static set apiURI(value: string) {\r\n    ConfigService._apiURI = value;\r\n  }\r\n\r\n}\r\n","import { Injectable, EventEmitter } from '@angular/core';\r\n\r\n/**\r\n * Broadcast events through components using a publish/subscribe pattern.\r\n */\r\n@Injectable()\r\nexport class EmitterService {\r\n\r\n    private _emitters: { [ID: string]: EventEmitter<any> } = {};\r\n\r\n    public get(ID: string): EventEmitter<any> {\r\n        console.log(`Emitter for ${ID} called`);\r\n        if (!this._emitters[ID]) {\r\n          console.log(`Emitter for ${ID} added`);\r\n          this._emitters[ID] = new EventEmitter();\r\n        } else {\r\n          console.log(`Emitter for ${ID} exists`);\r\n        }\r\n        return this._emitters[ID];\r\n    }\r\n\r\n}","// services used in controllers\r\nexport * from './account.service';\r\nexport * from './machinedata.service';\r\nexport * from './emitter.service';\r\nexport * from './auth.service';\r\nexport * from './config.service';\r\n// supporting api\r\nexport * from './lib/frontendapi.services';\r\n// helper for authentication\r\nexport * from './auth/tokeninterceptor.service';\r\n","/* tslint:disable */\n/* eslint-disable */\n//----------------------\n// <auto-generated>\n//     Generated using the NSwag toolchain v13.4.1.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)\n// </auto-generated>\n//----------------------\n// ReSharper disable InconsistentNaming\n\nimport { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';\nimport { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';\nimport { Injectable, Inject, Optional, InjectionToken } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';\n\nexport const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');\n\n@Injectable()\nexport class ApiAccounts {\n    private http: HttpClient;\n    private baseUrl: string;\n    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;\n\n    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {\n        this.http = http;\n        this.baseUrl = baseUrl ? baseUrl : \"http://localhost:5000\";\n    }\n\n    get(id: string | null): Observable<UserViewModel> {\n        let url_ = this.baseUrl + \"/api/Accounts/{id}\";\n        if (id === undefined || id === null)\n            throw new Error(\"The parameter 'id' must be defined.\");\n        url_ = url_.replace(\"{id}\", encodeURIComponent(\"\" + id));\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ : any = {\n            observe: \"response\",\n            responseType: \"blob\",\n            headers: new HttpHeaders({\n                \"Accept\": \"application/json\"\n            })\n        };\n\n        return this.http.request(\"get\", url_, options_).pipe(_observableMergeMap((response_ : any) => {\n            return this.processGet(response_);\n        })).pipe(_observableCatch((response_: any) => {\n            if (response_ instanceof HttpResponseBase) {\n                try {\n                    return this.processGet(<any>response_);\n                } catch (e) {\n                    return <Observable<UserViewModel>><any>_observableThrow(e);\n                }\n            } else\n                return <Observable<UserViewModel>><any>_observableThrow(response_);\n        }));\n    }\n\n    protected processGet(response: HttpResponseBase): Observable<UserViewModel> {\n        const status = response.status;\n        const responseBlob =\n            response instanceof HttpResponse ? response.body :\n            (<any>response).error instanceof Blob ? (<any>response).error : undefined;\n\n        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}\n        if (status === 200) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            let result200: any = null;\n            let resultData200 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\n            result200 = UserViewModel.fromJS(resultData200);\n            return _observableOf(result200);\n            }));\n        } else if (status === 400) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            let result400: any = null;\n            let resultData400 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\n            result400 = resultData400 !== undefined ? resultData400 : <any>null;\n            return throwException(\"A server side error occurred.\", status, _responseText, _headers, result400);\n            }));\n        } else if (status !== 200 && status !== 204) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            }));\n        }\n        return _observableOf<UserViewModel>(<any>null);\n    }\n\n    getClaims(id: string | null): Observable<ClaimViewModel[]> {\n        let url_ = this.baseUrl + \"/api/Accounts/{id}/claims\";\n        if (id === undefined || id === null)\n            throw new Error(\"The parameter 'id' must be defined.\");\n        url_ = url_.replace(\"{id}\", encodeURIComponent(\"\" + id));\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ : any = {\n            observe: \"response\",\n            responseType: \"blob\",\n            headers: new HttpHeaders({\n                \"Accept\": \"application/json\"\n            })\n        };\n\n        return this.http.request(\"get\", url_, options_).pipe(_observableMergeMap((response_ : any) => {\n            return this.processGetClaims(response_);\n        })).pipe(_observableCatch((response_: any) => {\n            if (response_ instanceof HttpResponseBase) {\n                try {\n                    return this.processGetClaims(<any>response_);\n                } catch (e) {\n                    return <Observable<ClaimViewModel[]>><any>_observableThrow(e);\n                }\n            } else\n                return <Observable<ClaimViewModel[]>><any>_observableThrow(response_);\n        }));\n    }\n\n    protected processGetClaims(response: HttpResponseBase): Observable<ClaimViewModel[]> {\n        const status = response.status;\n        const responseBlob =\n            response instanceof HttpResponse ? response.body :\n            (<any>response).error instanceof Blob ? (<any>response).error : undefined;\n\n        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}\n        if (status === 200) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            let result200: any = null;\n            let resultData200 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\n            if (Array.isArray(resultData200)) {\n                result200 = [] as any;\n                for (let item of resultData200)\n                    result200!.push(ClaimViewModel.fromJS(item));\n            }\n            return _observableOf(result200);\n            }));\n        } else if (status === 400) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            let result400: any = null;\n            let resultData400 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\n            result400 = resultData400 !== undefined ? resultData400 : <any>null;\n            return throwException(\"A server side error occurred.\", status, _responseText, _headers, result400);\n            }));\n        } else if (status !== 200 && status !== 204) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            }));\n        }\n        return _observableOf<ClaimViewModel[]>(<any>null);\n    }\n}\n\n@Injectable()\nexport class ApiAuth {\n    private http: HttpClient;\n    private baseUrl: string;\n    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;\n\n    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {\n        this.http = http;\n        this.baseUrl = baseUrl ? baseUrl : \"http://localhost:5000\";\n    }\n\n    getProviders(): Observable<ProviderViewModel[]> {\n        let url_ = this.baseUrl + \"/api/Auth\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ : any = {\n            observe: \"response\",\n            responseType: \"blob\",\n            headers: new HttpHeaders({\n                \"Accept\": \"application/json\"\n            })\n        };\n\n        return this.http.request(\"get\", url_, options_).pipe(_observableMergeMap((response_ : any) => {\n            return this.processGetProviders(response_);\n        })).pipe(_observableCatch((response_: any) => {\n            if (response_ instanceof HttpResponseBase) {\n                try {\n                    return this.processGetProviders(<any>response_);\n                } catch (e) {\n                    return <Observable<ProviderViewModel[]>><any>_observableThrow(e);\n                }\n            } else\n                return <Observable<ProviderViewModel[]>><any>_observableThrow(response_);\n        }));\n    }\n\n    protected processGetProviders(response: HttpResponseBase): Observable<ProviderViewModel[]> {\n        const status = response.status;\n        const responseBlob =\n            response instanceof HttpResponse ? response.body :\n            (<any>response).error instanceof Blob ? (<any>response).error : undefined;\n\n        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}\n        {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            let resultdefault: any = null;\n            let resultDatadefault = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\n            if (Array.isArray(resultDatadefault)) {\n                resultdefault = [] as any;\n                for (let item of resultDatadefault)\n                    resultdefault!.push(ProviderViewModel.fromJS(item));\n            }\n            return _observableOf(resultdefault);\n            }));\n        }\n    }\n\n    post(credentials: LogonViewModel): Observable<TokenResponseViewModel> {\n        let url_ = this.baseUrl + \"/api/Auth/login\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        const content_ = JSON.stringify(credentials);\n\n        let options_ : any = {\n            body: content_,\n            observe: \"response\",\n            responseType: \"blob\",\n            headers: new HttpHeaders({\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            })\n        };\n\n        return this.http.request(\"post\", url_, options_).pipe(_observableMergeMap((response_ : any) => {\n            return this.processPost(response_);\n        })).pipe(_observableCatch((response_: any) => {\n            if (response_ instanceof HttpResponseBase) {\n                try {\n                    return this.processPost(<any>response_);\n                } catch (e) {\n                    return <Observable<TokenResponseViewModel>><any>_observableThrow(e);\n                }\n            } else\n                return <Observable<TokenResponseViewModel>><any>_observableThrow(response_);\n        }));\n    }\n\n    protected processPost(response: HttpResponseBase): Observable<TokenResponseViewModel> {\n        const status = response.status;\n        const responseBlob =\n            response instanceof HttpResponse ? response.body :\n            (<any>response).error instanceof Blob ? (<any>response).error : undefined;\n\n        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}\n        if (status === 200) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            let result200: any = null;\n            let resultData200 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\n            result200 = TokenResponseViewModel.fromJS(resultData200);\n            return _observableOf(result200);\n            }));\n        } else if (status === 400) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            let result400: any = null;\n            let resultData400 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\n            result400 = ModelStateDictionary.fromJS(resultData400);\n            return throwException(\"A server side error occurred.\", status, _responseText, _headers, result400);\n            }));\n        } else if (status !== 200 && status !== 204) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            }));\n        }\n        return _observableOf<TokenResponseViewModel>(<any>null);\n    }\n\n    post2(model: RegistrationViewModel): Observable<string> {\n        let url_ = this.baseUrl + \"/api/Auth/register\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        const content_ = JSON.stringify(model);\n\n        let options_ : any = {\n            body: content_,\n            observe: \"response\",\n            responseType: \"blob\",\n            headers: new HttpHeaders({\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            })\n        };\n\n        return this.http.request(\"post\", url_, options_).pipe(_observableMergeMap((response_ : any) => {\n            return this.processPost2(response_);\n        })).pipe(_observableCatch((response_: any) => {\n            if (response_ instanceof HttpResponseBase) {\n                try {\n                    return this.processPost2(<any>response_);\n                } catch (e) {\n                    return <Observable<string>><any>_observableThrow(e);\n                }\n            } else\n                return <Observable<string>><any>_observableThrow(response_);\n        }));\n    }\n\n    protected processPost2(response: HttpResponseBase): Observable<string> {\n        const status = response.status;\n        const responseBlob =\n            response instanceof HttpResponse ? response.body :\n            (<any>response).error instanceof Blob ? (<any>response).error : undefined;\n\n        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}\n        if (status === 200) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            let result200: any = null;\n            let resultData200 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\n            result200 = resultData200 !== undefined ? resultData200 : <any>null;\n            return _observableOf(result200);\n            }));\n        } else if (status === 400) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            let result400: any = null;\n            let resultData400 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\n            result400 = ModelStateDictionary.fromJS(resultData400);\n            return throwException(\"A server side error occurred.\", status, _responseText, _headers, result400);\n            }));\n        } else if (status !== 200 && status !== 204) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            }));\n        }\n        return _observableOf<string>(<any>null);\n    }\n}\n\n@Injectable()\nexport class ApiMachines {\n    private http: HttpClient;\n    private baseUrl: string;\n    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;\n\n    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {\n        this.http = http;\n        this.baseUrl = baseUrl ? baseUrl : \"http://localhost:5000\";\n    }\n\n    get(): Observable<MachineViewModel[]> {\n        let url_ = this.baseUrl + \"/api/Machines\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ : any = {\n            observe: \"response\",\n            responseType: \"blob\",\n            headers: new HttpHeaders({\n                \"Accept\": \"application/json\"\n            })\n        };\n\n        return this.http.request(\"get\", url_, options_).pipe(_observableMergeMap((response_ : any) => {\n            return this.processGet(response_);\n        })).pipe(_observableCatch((response_: any) => {\n            if (response_ instanceof HttpResponseBase) {\n                try {\n                    return this.processGet(<any>response_);\n                } catch (e) {\n                    return <Observable<MachineViewModel[]>><any>_observableThrow(e);\n                }\n            } else\n                return <Observable<MachineViewModel[]>><any>_observableThrow(response_);\n        }));\n    }\n\n    protected processGet(response: HttpResponseBase): Observable<MachineViewModel[]> {\n        const status = response.status;\n        const responseBlob =\n            response instanceof HttpResponse ? response.body :\n            (<any>response).error instanceof Blob ? (<any>response).error : undefined;\n\n        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}\n        {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            let resultdefault: any = null;\n            let resultDatadefault = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\n            if (Array.isArray(resultDatadefault)) {\n                resultdefault = [] as any;\n                for (let item of resultDatadefault)\n                    resultdefault!.push(MachineViewModel.fromJS(item));\n            }\n            return _observableOf(resultdefault);\n            }));\n        }\n    }\n\n    post(value: MachineViewModel): Observable<void> {\n        let url_ = this.baseUrl + \"/api/Machines\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        const content_ = JSON.stringify(value);\n\n        let options_ : any = {\n            body: content_,\n            observe: \"response\",\n            responseType: \"blob\",\n            headers: new HttpHeaders({\n                \"Content-Type\": \"application/json\",\n            })\n        };\n\n        return this.http.request(\"post\", url_, options_).pipe(_observableMergeMap((response_ : any) => {\n            return this.processPost(response_);\n        })).pipe(_observableCatch((response_: any) => {\n            if (response_ instanceof HttpResponseBase) {\n                try {\n                    return this.processPost(<any>response_);\n                } catch (e) {\n                    return <Observable<void>><any>_observableThrow(e);\n                }\n            } else\n                return <Observable<void>><any>_observableThrow(response_);\n        }));\n    }\n\n    protected processPost(response: HttpResponseBase): Observable<void> {\n        const status = response.status;\n        const responseBlob =\n            response instanceof HttpResponse ? response.body :\n            (<any>response).error instanceof Blob ? (<any>response).error : undefined;\n\n        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}\n        if (status === 400) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            let result400: any = null;\n            let resultData400 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\n            result400 = ModelStateDictionary.fromJS(resultData400);\n            return throwException(\"A server side error occurred.\", status, _responseText, _headers, result400);\n            }));\n        } else {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            return _observableOf<void>(<any>null);\n            }));\n        }\n    }\n\n    get2(id: number): Observable<MachineViewModel> {\n        let url_ = this.baseUrl + \"/api/Machines/{id}\";\n        if (id === undefined || id === null)\n            throw new Error(\"The parameter 'id' must be defined.\");\n        url_ = url_.replace(\"{id}\", encodeURIComponent(\"\" + id));\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ : any = {\n            observe: \"response\",\n            responseType: \"blob\",\n            headers: new HttpHeaders({\n                \"Accept\": \"application/json\"\n            })\n        };\n\n        return this.http.request(\"get\", url_, options_).pipe(_observableMergeMap((response_ : any) => {\n            return this.processGet2(response_);\n        })).pipe(_observableCatch((response_: any) => {\n            if (response_ instanceof HttpResponseBase) {\n                try {\n                    return this.processGet2(<any>response_);\n                } catch (e) {\n                    return <Observable<MachineViewModel>><any>_observableThrow(e);\n                }\n            } else\n                return <Observable<MachineViewModel>><any>_observableThrow(response_);\n        }));\n    }\n\n    protected processGet2(response: HttpResponseBase): Observable<MachineViewModel> {\n        const status = response.status;\n        const responseBlob =\n            response instanceof HttpResponse ? response.body :\n            (<any>response).error instanceof Blob ? (<any>response).error : undefined;\n\n        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}\n        {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            let resultdefault: any = null;\n            let resultDatadefault = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\n            resultdefault = MachineViewModel.fromJS(resultDatadefault);\n            return _observableOf(resultdefault);\n            }));\n        }\n    }\n\n    put(id: number, value: MachineViewModel): Observable<void> {\n        let url_ = this.baseUrl + \"/api/Machines/{id}\";\n        if (id === undefined || id === null)\n            throw new Error(\"The parameter 'id' must be defined.\");\n        url_ = url_.replace(\"{id}\", encodeURIComponent(\"\" + id));\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        const content_ = JSON.stringify(value);\n\n        let options_ : any = {\n            body: content_,\n            observe: \"response\",\n            responseType: \"blob\",\n            headers: new HttpHeaders({\n                \"Content-Type\": \"application/json\",\n            })\n        };\n\n        return this.http.request(\"put\", url_, options_).pipe(_observableMergeMap((response_ : any) => {\n            return this.processPut(response_);\n        })).pipe(_observableCatch((response_: any) => {\n            if (response_ instanceof HttpResponseBase) {\n                try {\n                    return this.processPut(<any>response_);\n                } catch (e) {\n                    return <Observable<void>><any>_observableThrow(e);\n                }\n            } else\n                return <Observable<void>><any>_observableThrow(response_);\n        }));\n    }\n\n    protected processPut(response: HttpResponseBase): Observable<void> {\n        const status = response.status;\n        const responseBlob =\n            response instanceof HttpResponse ? response.body :\n            (<any>response).error instanceof Blob ? (<any>response).error : undefined;\n\n        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}\n        if (status === 400) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            let result400: any = null;\n            let resultData400 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\n            result400 = ModelStateDictionary.fromJS(resultData400);\n            return throwException(\"A server side error occurred.\", status, _responseText, _headers, result400);\n            }));\n        } else {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            return _observableOf<void>(<any>null);\n            }));\n        }\n    }\n\n    delete(id: number): Observable<void> {\n        let url_ = this.baseUrl + \"/api/Machines/{id}\";\n        if (id === undefined || id === null)\n            throw new Error(\"The parameter 'id' must be defined.\");\n        url_ = url_.replace(\"{id}\", encodeURIComponent(\"\" + id));\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ : any = {\n            observe: \"response\",\n            responseType: \"blob\",\n            headers: new HttpHeaders({\n            })\n        };\n\n        return this.http.request(\"delete\", url_, options_).pipe(_observableMergeMap((response_ : any) => {\n            return this.processDelete(response_);\n        })).pipe(_observableCatch((response_: any) => {\n            if (response_ instanceof HttpResponseBase) {\n                try {\n                    return this.processDelete(<any>response_);\n                } catch (e) {\n                    return <Observable<void>><any>_observableThrow(e);\n                }\n            } else\n                return <Observable<void>><any>_observableThrow(response_);\n        }));\n    }\n\n    protected processDelete(response: HttpResponseBase): Observable<void> {\n        const status = response.status;\n        const responseBlob =\n            response instanceof HttpResponse ? response.body :\n            (<any>response).error instanceof Blob ? (<any>response).error : undefined;\n\n        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}\n        if (status === 400) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            return throwException(\"A server side error occurred.\", status, _responseText, _headers);\n            }));\n        } else {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            return _observableOf<void>(<any>null);\n            }));\n        }\n    }\n}\n\n@Injectable()\nexport class ApiClaim {\n    private http: HttpClient;\n    private baseUrl: string;\n    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;\n\n    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {\n        this.http = http;\n        this.baseUrl = baseUrl ? baseUrl : \"http://localhost:5000\";\n    }\n\n    get(id: string | null | undefined): Observable<ClaimViewModel[]> {\n        let url_ = this.baseUrl + \"/api/useradmin/Claim?\";\n        if (id !== undefined)\n            url_ += \"id=\" + encodeURIComponent(\"\" + id) + \"&\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ : any = {\n            observe: \"response\",\n            responseType: \"blob\",\n            headers: new HttpHeaders({\n                \"Accept\": \"application/json\"\n            })\n        };\n\n        return this.http.request(\"get\", url_, options_).pipe(_observableMergeMap((response_ : any) => {\n            return this.processGet(response_);\n        })).pipe(_observableCatch((response_: any) => {\n            if (response_ instanceof HttpResponseBase) {\n                try {\n                    return this.processGet(<any>response_);\n                } catch (e) {\n                    return <Observable<ClaimViewModel[]>><any>_observableThrow(e);\n                }\n            } else\n                return <Observable<ClaimViewModel[]>><any>_observableThrow(response_);\n        }));\n    }\n\n    protected processGet(response: HttpResponseBase): Observable<ClaimViewModel[]> {\n        const status = response.status;\n        const responseBlob =\n            response instanceof HttpResponse ? response.body :\n            (<any>response).error instanceof Blob ? (<any>response).error : undefined;\n\n        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}\n        if (status === 200) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            let result200: any = null;\n            let resultData200 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\n            if (Array.isArray(resultData200)) {\n                result200 = [] as any;\n                for (let item of resultData200)\n                    result200!.push(ClaimViewModel.fromJS(item));\n            }\n            return _observableOf(result200);\n            }));\n        } else if (status !== 200 && status !== 204) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            }));\n        }\n        return _observableOf<ClaimViewModel[]>(<any>null);\n    }\n\n    post(value: string): Observable<void> {\n        let url_ = this.baseUrl + \"/api/useradmin/Claim\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        const content_ = JSON.stringify(value);\n\n        let options_ : any = {\n            body: content_,\n            observe: \"response\",\n            responseType: \"blob\",\n            headers: new HttpHeaders({\n                \"Content-Type\": \"application/json\",\n            })\n        };\n\n        return this.http.request(\"post\", url_, options_).pipe(_observableMergeMap((response_ : any) => {\n            return this.processPost(response_);\n        })).pipe(_observableCatch((response_: any) => {\n            if (response_ instanceof HttpResponseBase) {\n                try {\n                    return this.processPost(<any>response_);\n                } catch (e) {\n                    return <Observable<void>><any>_observableThrow(e);\n                }\n            } else\n                return <Observable<void>><any>_observableThrow(response_);\n        }));\n    }\n\n    protected processPost(response: HttpResponseBase): Observable<void> {\n        const status = response.status;\n        const responseBlob =\n            response instanceof HttpResponse ? response.body :\n            (<any>response).error instanceof Blob ? (<any>response).error : undefined;\n\n        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}\n        if (status === 200) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            return _observableOf<void>(<any>null);\n            }));\n        } else if (status !== 200 && status !== 204) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            }));\n        }\n        return _observableOf<void>(<any>null);\n    }\n\n    getUserForClaim(id: string, claimViewModel: ClaimViewModel): Observable<UserViewModel[]> {\n        let url_ = this.baseUrl + \"/api/useradmin/Claim/{id}\";\n        if (id === undefined || id === null)\n            throw new Error(\"The parameter 'id' must be defined.\");\n        url_ = url_.replace(\"{id}\", encodeURIComponent(\"\" + id));\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        const content_ = JSON.stringify(claimViewModel);\n\n        let options_ : any = {\n            body: content_,\n            observe: \"response\",\n            responseType: \"blob\",\n            headers: new HttpHeaders({\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            })\n        };\n\n        return this.http.request(\"get\", url_, options_).pipe(_observableMergeMap((response_ : any) => {\n            return this.processGetUserForClaim(response_);\n        })).pipe(_observableCatch((response_: any) => {\n            if (response_ instanceof HttpResponseBase) {\n                try {\n                    return this.processGetUserForClaim(<any>response_);\n                } catch (e) {\n                    return <Observable<UserViewModel[]>><any>_observableThrow(e);\n                }\n            } else\n                return <Observable<UserViewModel[]>><any>_observableThrow(response_);\n        }));\n    }\n\n    protected processGetUserForClaim(response: HttpResponseBase): Observable<UserViewModel[]> {\n        const status = response.status;\n        const responseBlob =\n            response instanceof HttpResponse ? response.body :\n            (<any>response).error instanceof Blob ? (<any>response).error : undefined;\n\n        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}\n        if (status === 200) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            let result200: any = null;\n            let resultData200 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\n            if (Array.isArray(resultData200)) {\n                result200 = [] as any;\n                for (let item of resultData200)\n                    result200!.push(UserViewModel.fromJS(item));\n            }\n            return _observableOf(result200);\n            }));\n        } else if (status !== 200 && status !== 204) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            }));\n        }\n        return _observableOf<UserViewModel[]>(<any>null);\n    }\n\n    delete(id: string | null, claimType: string | null | undefined): Observable<void> {\n        let url_ = this.baseUrl + \"/api/useradmin/Claim/{id}?\";\n        if (id === undefined || id === null)\n            throw new Error(\"The parameter 'id' must be defined.\");\n        url_ = url_.replace(\"{id}\", encodeURIComponent(\"\" + id));\n        if (claimType !== undefined)\n            url_ += \"claimType=\" + encodeURIComponent(\"\" + claimType) + \"&\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ : any = {\n            observe: \"response\",\n            responseType: \"blob\",\n            headers: new HttpHeaders({\n            })\n        };\n\n        return this.http.request(\"delete\", url_, options_).pipe(_observableMergeMap((response_ : any) => {\n            return this.processDelete(response_);\n        })).pipe(_observableCatch((response_: any) => {\n            if (response_ instanceof HttpResponseBase) {\n                try {\n                    return this.processDelete(<any>response_);\n                } catch (e) {\n                    return <Observable<void>><any>_observableThrow(e);\n                }\n            } else\n                return <Observable<void>><any>_observableThrow(response_);\n        }));\n    }\n\n    protected processDelete(response: HttpResponseBase): Observable<void> {\n        const status = response.status;\n        const responseBlob =\n            response instanceof HttpResponse ? response.body :\n            (<any>response).error instanceof Blob ? (<any>response).error : undefined;\n\n        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}\n        if (status === 200) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            return _observableOf<void>(<any>null);\n            }));\n        } else if (status !== 200 && status !== 204) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            }));\n        }\n        return _observableOf<void>(<any>null);\n    }\n\n    put(id: string | null, oldClaimType: string | null, newClaimType: string | null): Observable<void> {\n        let url_ = this.baseUrl + \"/api/useradmin/Claim/{id}/{oldClaimType}/{newClaimType}\";\n        if (id === undefined || id === null)\n            throw new Error(\"The parameter 'id' must be defined.\");\n        url_ = url_.replace(\"{id}\", encodeURIComponent(\"\" + id));\n        if (oldClaimType === undefined || oldClaimType === null)\n            throw new Error(\"The parameter 'oldClaimType' must be defined.\");\n        url_ = url_.replace(\"{oldClaimType}\", encodeURIComponent(\"\" + oldClaimType));\n        if (newClaimType === undefined || newClaimType === null)\n            throw new Error(\"The parameter 'newClaimType' must be defined.\");\n        url_ = url_.replace(\"{newClaimType}\", encodeURIComponent(\"\" + newClaimType));\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ : any = {\n            observe: \"response\",\n            responseType: \"blob\",\n            headers: new HttpHeaders({\n            })\n        };\n\n        return this.http.request(\"put\", url_, options_).pipe(_observableMergeMap((response_ : any) => {\n            return this.processPut(response_);\n        })).pipe(_observableCatch((response_: any) => {\n            if (response_ instanceof HttpResponseBase) {\n                try {\n                    return this.processPut(<any>response_);\n                } catch (e) {\n                    return <Observable<void>><any>_observableThrow(e);\n                }\n            } else\n                return <Observable<void>><any>_observableThrow(response_);\n        }));\n    }\n\n    protected processPut(response: HttpResponseBase): Observable<void> {\n        const status = response.status;\n        const responseBlob =\n            response instanceof HttpResponse ? response.body :\n            (<any>response).error instanceof Blob ? (<any>response).error : undefined;\n\n        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}\n        if (status === 200) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            return _observableOf<void>(<any>null);\n            }));\n        } else if (status !== 200 && status !== 204) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            }));\n        }\n        return _observableOf<void>(<any>null);\n    }\n}\n\n@Injectable()\nexport class ApiRole {\n    private http: HttpClient;\n    private baseUrl: string;\n    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;\n\n    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {\n        this.http = http;\n        this.baseUrl = baseUrl ? baseUrl : \"http://localhost:5000\";\n    }\n\n    get(): Observable<RoleViewModel[]> {\n        let url_ = this.baseUrl + \"/api/useradmin/Role\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ : any = {\n            observe: \"response\",\n            responseType: \"blob\",\n            headers: new HttpHeaders({\n                \"Accept\": \"application/json\"\n            })\n        };\n\n        return this.http.request(\"get\", url_, options_).pipe(_observableMergeMap((response_ : any) => {\n            return this.processGet(response_);\n        })).pipe(_observableCatch((response_: any) => {\n            if (response_ instanceof HttpResponseBase) {\n                try {\n                    return this.processGet(<any>response_);\n                } catch (e) {\n                    return <Observable<RoleViewModel[]>><any>_observableThrow(e);\n                }\n            } else\n                return <Observable<RoleViewModel[]>><any>_observableThrow(response_);\n        }));\n    }\n\n    protected processGet(response: HttpResponseBase): Observable<RoleViewModel[]> {\n        const status = response.status;\n        const responseBlob =\n            response instanceof HttpResponse ? response.body :\n            (<any>response).error instanceof Blob ? (<any>response).error : undefined;\n\n        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}\n        if (status === 200) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            let result200: any = null;\n            let resultData200 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\n            if (Array.isArray(resultData200)) {\n                result200 = [] as any;\n                for (let item of resultData200)\n                    result200!.push(RoleViewModel.fromJS(item));\n            }\n            return _observableOf(result200);\n            }));\n        } else if (status !== 200 && status !== 204) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            }));\n        }\n        return _observableOf<RoleViewModel[]>(<any>null);\n    }\n\n    post(role: RoleViewModel): Observable<void> {\n        let url_ = this.baseUrl + \"/api/useradmin/Role\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        const content_ = JSON.stringify(role);\n\n        let options_ : any = {\n            body: content_,\n            observe: \"response\",\n            responseType: \"blob\",\n            headers: new HttpHeaders({\n                \"Content-Type\": \"application/json\",\n            })\n        };\n\n        return this.http.request(\"post\", url_, options_).pipe(_observableMergeMap((response_ : any) => {\n            return this.processPost(response_);\n        })).pipe(_observableCatch((response_: any) => {\n            if (response_ instanceof HttpResponseBase) {\n                try {\n                    return this.processPost(<any>response_);\n                } catch (e) {\n                    return <Observable<void>><any>_observableThrow(e);\n                }\n            } else\n                return <Observable<void>><any>_observableThrow(response_);\n        }));\n    }\n\n    protected processPost(response: HttpResponseBase): Observable<void> {\n        const status = response.status;\n        const responseBlob =\n            response instanceof HttpResponse ? response.body :\n            (<any>response).error instanceof Blob ? (<any>response).error : undefined;\n\n        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}\n        if (status === 200) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            return _observableOf<void>(<any>null);\n            }));\n        } else if (status !== 200 && status !== 204) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            }));\n        }\n        return _observableOf<void>(<any>null);\n    }\n\n    getbyId(id: string | null): Observable<RoleViewModel> {\n        let url_ = this.baseUrl + \"/api/useradmin/Role/{id}\";\n        if (id === undefined || id === null)\n            throw new Error(\"The parameter 'id' must be defined.\");\n        url_ = url_.replace(\"{id}\", encodeURIComponent(\"\" + id));\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ : any = {\n            observe: \"response\",\n            responseType: \"blob\",\n            headers: new HttpHeaders({\n                \"Accept\": \"application/json\"\n            })\n        };\n\n        return this.http.request(\"get\", url_, options_).pipe(_observableMergeMap((response_ : any) => {\n            return this.processGetbyId(response_);\n        })).pipe(_observableCatch((response_: any) => {\n            if (response_ instanceof HttpResponseBase) {\n                try {\n                    return this.processGetbyId(<any>response_);\n                } catch (e) {\n                    return <Observable<RoleViewModel>><any>_observableThrow(e);\n                }\n            } else\n                return <Observable<RoleViewModel>><any>_observableThrow(response_);\n        }));\n    }\n\n    protected processGetbyId(response: HttpResponseBase): Observable<RoleViewModel> {\n        const status = response.status;\n        const responseBlob =\n            response instanceof HttpResponse ? response.body :\n            (<any>response).error instanceof Blob ? (<any>response).error : undefined;\n\n        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}\n        if (status === 200) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            let result200: any = null;\n            let resultData200 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\n            result200 = RoleViewModel.fromJS(resultData200);\n            return _observableOf(result200);\n            }));\n        } else if (status !== 200 && status !== 204) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            }));\n        }\n        return _observableOf<RoleViewModel>(<any>null);\n    }\n\n    put(id: number, role: RoleViewModel): Observable<void> {\n        let url_ = this.baseUrl + \"/api/useradmin/Role/{id}\";\n        if (id === undefined || id === null)\n            throw new Error(\"The parameter 'id' must be defined.\");\n        url_ = url_.replace(\"{id}\", encodeURIComponent(\"\" + id));\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        const content_ = JSON.stringify(role);\n\n        let options_ : any = {\n            body: content_,\n            observe: \"response\",\n            responseType: \"blob\",\n            headers: new HttpHeaders({\n                \"Content-Type\": \"application/json\",\n            })\n        };\n\n        return this.http.request(\"put\", url_, options_).pipe(_observableMergeMap((response_ : any) => {\n            return this.processPut(response_);\n        })).pipe(_observableCatch((response_: any) => {\n            if (response_ instanceof HttpResponseBase) {\n                try {\n                    return this.processPut(<any>response_);\n                } catch (e) {\n                    return <Observable<void>><any>_observableThrow(e);\n                }\n            } else\n                return <Observable<void>><any>_observableThrow(response_);\n        }));\n    }\n\n    protected processPut(response: HttpResponseBase): Observable<void> {\n        const status = response.status;\n        const responseBlob =\n            response instanceof HttpResponse ? response.body :\n            (<any>response).error instanceof Blob ? (<any>response).error : undefined;\n\n        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}\n        if (status === 200) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            return _observableOf<void>(<any>null);\n            }));\n        } else if (status !== 200 && status !== 204) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            }));\n        }\n        return _observableOf<void>(<any>null);\n    }\n\n    delete(id: string | null): Observable<void> {\n        let url_ = this.baseUrl + \"/api/useradmin/Role/{id}\";\n        if (id === undefined || id === null)\n            throw new Error(\"The parameter 'id' must be defined.\");\n        url_ = url_.replace(\"{id}\", encodeURIComponent(\"\" + id));\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ : any = {\n            observe: \"response\",\n            responseType: \"blob\",\n            headers: new HttpHeaders({\n            })\n        };\n\n        return this.http.request(\"delete\", url_, options_).pipe(_observableMergeMap((response_ : any) => {\n            return this.processDelete(response_);\n        })).pipe(_observableCatch((response_: any) => {\n            if (response_ instanceof HttpResponseBase) {\n                try {\n                    return this.processDelete(<any>response_);\n                } catch (e) {\n                    return <Observable<void>><any>_observableThrow(e);\n                }\n            } else\n                return <Observable<void>><any>_observableThrow(response_);\n        }));\n    }\n\n    protected processDelete(response: HttpResponseBase): Observable<void> {\n        const status = response.status;\n        const responseBlob =\n            response instanceof HttpResponse ? response.body :\n            (<any>response).error instanceof Blob ? (<any>response).error : undefined;\n\n        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}\n        if (status === 200) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            return _observableOf<void>(<any>null);\n            }));\n        } else if (status !== 200 && status !== 204) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            }));\n        }\n        return _observableOf<void>(<any>null);\n    }\n}\n\n@Injectable()\nexport class ApiUser {\n    private http: HttpClient;\n    private baseUrl: string;\n    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;\n\n    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {\n        this.http = http;\n        this.baseUrl = baseUrl ? baseUrl : \"http://localhost:5000\";\n    }\n\n    get(): Observable<UserViewModel[]> {\n        let url_ = this.baseUrl + \"/api/useradmin/User\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ : any = {\n            observe: \"response\",\n            responseType: \"blob\",\n            headers: new HttpHeaders({\n                \"Accept\": \"application/json\"\n            })\n        };\n\n        return this.http.request(\"get\", url_, options_).pipe(_observableMergeMap((response_ : any) => {\n            return this.processGet(response_);\n        })).pipe(_observableCatch((response_: any) => {\n            if (response_ instanceof HttpResponseBase) {\n                try {\n                    return this.processGet(<any>response_);\n                } catch (e) {\n                    return <Observable<UserViewModel[]>><any>_observableThrow(e);\n                }\n            } else\n                return <Observable<UserViewModel[]>><any>_observableThrow(response_);\n        }));\n    }\n\n    protected processGet(response: HttpResponseBase): Observable<UserViewModel[]> {\n        const status = response.status;\n        const responseBlob =\n            response instanceof HttpResponse ? response.body :\n            (<any>response).error instanceof Blob ? (<any>response).error : undefined;\n\n        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}\n        if (status === 200) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            let result200: any = null;\n            let resultData200 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\n            if (Array.isArray(resultData200)) {\n                result200 = [] as any;\n                for (let item of resultData200)\n                    result200!.push(UserViewModel.fromJS(item));\n            }\n            return _observableOf(result200);\n            }));\n        } else if (status !== 200 && status !== 204) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            }));\n        }\n        return _observableOf<UserViewModel[]>(<any>null);\n    }\n\n    post(user: UserViewModel): Observable<void> {\n        let url_ = this.baseUrl + \"/api/useradmin/User\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        const content_ = JSON.stringify(user);\n\n        let options_ : any = {\n            body: content_,\n            observe: \"response\",\n            responseType: \"blob\",\n            headers: new HttpHeaders({\n                \"Content-Type\": \"application/json\",\n            })\n        };\n\n        return this.http.request(\"post\", url_, options_).pipe(_observableMergeMap((response_ : any) => {\n            return this.processPost(response_);\n        })).pipe(_observableCatch((response_: any) => {\n            if (response_ instanceof HttpResponseBase) {\n                try {\n                    return this.processPost(<any>response_);\n                } catch (e) {\n                    return <Observable<void>><any>_observableThrow(e);\n                }\n            } else\n                return <Observable<void>><any>_observableThrow(response_);\n        }));\n    }\n\n    protected processPost(response: HttpResponseBase): Observable<void> {\n        const status = response.status;\n        const responseBlob =\n            response instanceof HttpResponse ? response.body :\n            (<any>response).error instanceof Blob ? (<any>response).error : undefined;\n\n        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}\n        if (status === 200) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            return _observableOf<void>(<any>null);\n            }));\n        } else if (status !== 200 && status !== 204) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            }));\n        }\n        return _observableOf<void>(<any>null);\n    }\n\n    getById(id: string | null): Observable<UserViewModel> {\n        let url_ = this.baseUrl + \"/api/useradmin/User/{id}\";\n        if (id === undefined || id === null)\n            throw new Error(\"The parameter 'id' must be defined.\");\n        url_ = url_.replace(\"{id}\", encodeURIComponent(\"\" + id));\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ : any = {\n            observe: \"response\",\n            responseType: \"blob\",\n            headers: new HttpHeaders({\n                \"Accept\": \"application/json\"\n            })\n        };\n\n        return this.http.request(\"get\", url_, options_).pipe(_observableMergeMap((response_ : any) => {\n            return this.processGetById(response_);\n        })).pipe(_observableCatch((response_: any) => {\n            if (response_ instanceof HttpResponseBase) {\n                try {\n                    return this.processGetById(<any>response_);\n                } catch (e) {\n                    return <Observable<UserViewModel>><any>_observableThrow(e);\n                }\n            } else\n                return <Observable<UserViewModel>><any>_observableThrow(response_);\n        }));\n    }\n\n    protected processGetById(response: HttpResponseBase): Observable<UserViewModel> {\n        const status = response.status;\n        const responseBlob =\n            response instanceof HttpResponse ? response.body :\n            (<any>response).error instanceof Blob ? (<any>response).error : undefined;\n\n        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}\n        if (status === 200) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            let result200: any = null;\n            let resultData200 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\n            result200 = UserViewModel.fromJS(resultData200);\n            return _observableOf(result200);\n            }));\n        } else if (status !== 200 && status !== 204) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            }));\n        }\n        return _observableOf<UserViewModel>(<any>null);\n    }\n\n    put(id: string | null, user: UserViewModel): Observable<void> {\n        let url_ = this.baseUrl + \"/api/useradmin/User/{id}\";\n        if (id === undefined || id === null)\n            throw new Error(\"The parameter 'id' must be defined.\");\n        url_ = url_.replace(\"{id}\", encodeURIComponent(\"\" + id));\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        const content_ = JSON.stringify(user);\n\n        let options_ : any = {\n            body: content_,\n            observe: \"response\",\n            responseType: \"blob\",\n            headers: new HttpHeaders({\n                \"Content-Type\": \"application/json\",\n            })\n        };\n\n        return this.http.request(\"put\", url_, options_).pipe(_observableMergeMap((response_ : any) => {\n            return this.processPut(response_);\n        })).pipe(_observableCatch((response_: any) => {\n            if (response_ instanceof HttpResponseBase) {\n                try {\n                    return this.processPut(<any>response_);\n                } catch (e) {\n                    return <Observable<void>><any>_observableThrow(e);\n                }\n            } else\n                return <Observable<void>><any>_observableThrow(response_);\n        }));\n    }\n\n    protected processPut(response: HttpResponseBase): Observable<void> {\n        const status = response.status;\n        const responseBlob =\n            response instanceof HttpResponse ? response.body :\n            (<any>response).error instanceof Blob ? (<any>response).error : undefined;\n\n        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}\n        if (status === 200) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            return _observableOf<void>(<any>null);\n            }));\n        } else if (status !== 200 && status !== 204) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            }));\n        }\n        return _observableOf<void>(<any>null);\n    }\n\n    delete(id: string | null): Observable<void> {\n        let url_ = this.baseUrl + \"/api/useradmin/User/{id}\";\n        if (id === undefined || id === null)\n            throw new Error(\"The parameter 'id' must be defined.\");\n        url_ = url_.replace(\"{id}\", encodeURIComponent(\"\" + id));\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ : any = {\n            observe: \"response\",\n            responseType: \"blob\",\n            headers: new HttpHeaders({\n            })\n        };\n\n        return this.http.request(\"delete\", url_, options_).pipe(_observableMergeMap((response_ : any) => {\n            return this.processDelete(response_);\n        })).pipe(_observableCatch((response_: any) => {\n            if (response_ instanceof HttpResponseBase) {\n                try {\n                    return this.processDelete(<any>response_);\n                } catch (e) {\n                    return <Observable<void>><any>_observableThrow(e);\n                }\n            } else\n                return <Observable<void>><any>_observableThrow(response_);\n        }));\n    }\n\n    protected processDelete(response: HttpResponseBase): Observable<void> {\n        const status = response.status;\n        const responseBlob =\n            response instanceof HttpResponse ? response.body :\n            (<any>response).error instanceof Blob ? (<any>response).error : undefined;\n\n        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}\n        if (status === 200) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            return _observableOf<void>(<any>null);\n            }));\n        } else if (status !== 200 && status !== 204) {\n            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            }));\n        }\n        return _observableOf<void>(<any>null);\n    }\n}\n\nexport class UserViewModel implements IUserViewModel {\n    id!: string;\n    email!: string;\n    passwordHash?: string | undefined;\n    userName?: string | undefined;\n\n    constructor(data?: IUserViewModel) {\n        if (data) {\n            for (var property in data) {\n                if (data.hasOwnProperty(property))\n                    (<any>this)[property] = (<any>data)[property];\n            }\n        }\n    }\n\n    init(_data?: any) {\n        if (_data) {\n            this.id = _data[\"id\"];\n            this.email = _data[\"email\"];\n            this.passwordHash = _data[\"passwordHash\"];\n            this.userName = _data[\"userName\"];\n        }\n    }\n\n    static fromJS(data: any): UserViewModel {\n        data = typeof data === 'object' ? data : {};\n        let result = new UserViewModel();\n        result.init(data);\n        return result;\n    }\n\n    toJSON(data?: any) {\n        data = typeof data === 'object' ? data : {};\n        data[\"id\"] = this.id;\n        data[\"email\"] = this.email;\n        data[\"passwordHash\"] = this.passwordHash;\n        data[\"userName\"] = this.userName;\n        return data; \n    }\n}\n\nexport interface IUserViewModel {\n    id: string;\n    email: string;\n    passwordHash?: string | undefined;\n    userName?: string | undefined;\n}\n\nexport class ClaimViewModel implements IClaimViewModel {\n    type!: string;\n    value?: string | undefined;\n\n    constructor(data?: IClaimViewModel) {\n        if (data) {\n            for (var property in data) {\n                if (data.hasOwnProperty(property))\n                    (<any>this)[property] = (<any>data)[property];\n            }\n        }\n    }\n\n    init(_data?: any) {\n        if (_data) {\n            this.type = _data[\"type\"];\n            this.value = _data[\"value\"];\n        }\n    }\n\n    static fromJS(data: any): ClaimViewModel {\n        data = typeof data === 'object' ? data : {};\n        let result = new ClaimViewModel();\n        result.init(data);\n        return result;\n    }\n\n    toJSON(data?: any) {\n        data = typeof data === 'object' ? data : {};\n        data[\"type\"] = this.type;\n        data[\"value\"] = this.value;\n        return data; \n    }\n}\n\nexport interface IClaimViewModel {\n    type: string;\n    value?: string | undefined;\n}\n\nexport class ProviderViewModel implements IProviderViewModel {\n    name?: string | undefined;\n    displayName?: string | undefined;\n    icon?: Stream | undefined;\n\n    constructor(data?: IProviderViewModel) {\n        if (data) {\n            for (var property in data) {\n                if (data.hasOwnProperty(property))\n                    (<any>this)[property] = (<any>data)[property];\n            }\n        }\n    }\n\n    init(_data?: any) {\n        if (_data) {\n            this.name = _data[\"name\"];\n            this.displayName = _data[\"displayName\"];\n            this.icon = _data[\"icon\"] ? Stream.fromJS(_data[\"icon\"]) : <any>undefined;\n        }\n    }\n\n    static fromJS(data: any): ProviderViewModel {\n        data = typeof data === 'object' ? data : {};\n        let result = new ProviderViewModel();\n        result.init(data);\n        return result;\n    }\n\n    toJSON(data?: any) {\n        data = typeof data === 'object' ? data : {};\n        data[\"name\"] = this.name;\n        data[\"displayName\"] = this.displayName;\n        data[\"icon\"] = this.icon ? this.icon.toJSON() : <any>undefined;\n        return data; \n    }\n}\n\nexport interface IProviderViewModel {\n    name?: string | undefined;\n    displayName?: string | undefined;\n    icon?: Stream | undefined;\n}\n\nexport abstract class MarshalByRefObject implements IMarshalByRefObject {\n\n    constructor(data?: IMarshalByRefObject) {\n        if (data) {\n            for (var property in data) {\n                if (data.hasOwnProperty(property))\n                    (<any>this)[property] = (<any>data)[property];\n            }\n        }\n    }\n\n    init(_data?: any) {\n    }\n\n    static fromJS(data: any): MarshalByRefObject {\n        data = typeof data === 'object' ? data : {};\n        throw new Error(\"The abstract class 'MarshalByRefObject' cannot be instantiated.\");\n    }\n\n    toJSON(data?: any) {\n        data = typeof data === 'object' ? data : {};\n        return data; \n    }\n}\n\nexport interface IMarshalByRefObject {\n}\n\nexport abstract class Stream extends MarshalByRefObject implements IStream {\n    canTimeout?: boolean;\n    readTimeout?: number;\n    writeTimeout?: number;\n\n    constructor(data?: IStream) {\n        super(data);\n    }\n\n    init(_data?: any) {\n        super.init(_data);\n        if (_data) {\n            this.canTimeout = _data[\"canTimeout\"];\n            this.readTimeout = _data[\"readTimeout\"];\n            this.writeTimeout = _data[\"writeTimeout\"];\n        }\n    }\n\n    static fromJS(data: any): Stream {\n        data = typeof data === 'object' ? data : {};\n        throw new Error(\"The abstract class 'Stream' cannot be instantiated.\");\n    }\n\n    toJSON(data?: any) {\n        data = typeof data === 'object' ? data : {};\n        data[\"canTimeout\"] = this.canTimeout;\n        data[\"readTimeout\"] = this.readTimeout;\n        data[\"writeTimeout\"] = this.writeTimeout;\n        super.toJSON(data);\n        return data; \n    }\n}\n\nexport interface IStream extends IMarshalByRefObject {\n    canTimeout?: boolean;\n    readTimeout?: number;\n    writeTimeout?: number;\n}\n\nexport class TokenResponseViewModel implements ITokenResponseViewModel {\n    id?: string | undefined;\n    authToken?: string | undefined;\n    expiresIn?: number;\n\n    constructor(data?: ITokenResponseViewModel) {\n        if (data) {\n            for (var property in data) {\n                if (data.hasOwnProperty(property))\n                    (<any>this)[property] = (<any>data)[property];\n            }\n        }\n    }\n\n    init(_data?: any) {\n        if (_data) {\n            this.id = _data[\"id\"];\n            this.authToken = _data[\"authToken\"];\n            this.expiresIn = _data[\"expiresIn\"];\n        }\n    }\n\n    static fromJS(data: any): TokenResponseViewModel {\n        data = typeof data === 'object' ? data : {};\n        let result = new TokenResponseViewModel();\n        result.init(data);\n        return result;\n    }\n\n    toJSON(data?: any) {\n        data = typeof data === 'object' ? data : {};\n        data[\"id\"] = this.id;\n        data[\"authToken\"] = this.authToken;\n        data[\"expiresIn\"] = this.expiresIn;\n        return data; \n    }\n}\n\nexport interface ITokenResponseViewModel {\n    id?: string | undefined;\n    authToken?: string | undefined;\n    expiresIn?: number;\n}\n\nexport class ModelStateDictionary implements IModelStateDictionary {\n    root?: ModelStateEntry | undefined;\n    maxAllowedErrors?: number;\n    hasReachedMaxErrors?: boolean;\n    errorCount?: number;\n    count?: number;\n    keys?: string[];\n    values?: ModelStateEntry[];\n    isValid?: boolean;\n    validationState?: ModelValidationState;\n    item?: ModelStateEntry | undefined;\n\n    constructor(data?: IModelStateDictionary) {\n        if (data) {\n            for (var property in data) {\n                if (data.hasOwnProperty(property))\n                    (<any>this)[property] = (<any>data)[property];\n            }\n        }\n    }\n\n    init(_data?: any) {\n        if (_data) {\n            this.root = _data[\"Root\"] ? ModelStateEntry.fromJS(_data[\"Root\"]) : <any>undefined;\n            this.maxAllowedErrors = _data[\"MaxAllowedErrors\"];\n            this.hasReachedMaxErrors = _data[\"HasReachedMaxErrors\"];\n            this.errorCount = _data[\"ErrorCount\"];\n            this.count = _data[\"Count\"];\n            if (Array.isArray(_data[\"Keys\"])) {\n                this.keys = [] as any;\n                for (let item of _data[\"Keys\"])\n                    this.keys!.push(item);\n            }\n            if (Array.isArray(_data[\"Values\"])) {\n                this.values = [] as any;\n                for (let item of _data[\"Values\"])\n                    this.values!.push(ModelStateEntry.fromJS(item));\n            }\n            this.isValid = _data[\"IsValid\"];\n            this.validationState = _data[\"ValidationState\"];\n            this.item = _data[\"Item\"] ? ModelStateEntry.fromJS(_data[\"Item\"]) : <any>undefined;\n        }\n    }\n\n    static fromJS(data: any): ModelStateDictionary {\n        data = typeof data === 'object' ? data : {};\n        let result = new ModelStateDictionary();\n        result.init(data);\n        return result;\n    }\n\n    toJSON(data?: any) {\n        data = typeof data === 'object' ? data : {};\n        data[\"Root\"] = this.root ? this.root.toJSON() : <any>undefined;\n        data[\"MaxAllowedErrors\"] = this.maxAllowedErrors;\n        data[\"HasReachedMaxErrors\"] = this.hasReachedMaxErrors;\n        data[\"ErrorCount\"] = this.errorCount;\n        data[\"Count\"] = this.count;\n        if (Array.isArray(this.keys)) {\n            data[\"Keys\"] = [];\n            for (let item of this.keys)\n                data[\"Keys\"].push(item);\n        }\n        if (Array.isArray(this.values)) {\n            data[\"Values\"] = [];\n            for (let item of this.values)\n                data[\"Values\"].push(item.toJSON());\n        }\n        data[\"IsValid\"] = this.isValid;\n        data[\"ValidationState\"] = this.validationState;\n        data[\"Item\"] = this.item ? this.item.toJSON() : <any>undefined;\n        return data; \n    }\n}\n\nexport interface IModelStateDictionary {\n    root?: ModelStateEntry | undefined;\n    maxAllowedErrors?: number;\n    hasReachedMaxErrors?: boolean;\n    errorCount?: number;\n    count?: number;\n    keys?: string[];\n    values?: ModelStateEntry[];\n    isValid?: boolean;\n    validationState?: ModelValidationState;\n    item?: ModelStateEntry | undefined;\n}\n\nexport abstract class ModelStateEntry implements IModelStateEntry {\n    rawValue?: any | undefined;\n    attemptedValue?: string | undefined;\n    errors?: ModelError[] | undefined;\n    validationState?: ModelValidationState;\n\n    constructor(data?: IModelStateEntry) {\n        if (data) {\n            for (var property in data) {\n                if (data.hasOwnProperty(property))\n                    (<any>this)[property] = (<any>data)[property];\n            }\n        }\n    }\n\n    init(_data?: any) {\n        if (_data) {\n            this.rawValue = _data[\"rawValue\"];\n            this.attemptedValue = _data[\"attemptedValue\"];\n            if (Array.isArray(_data[\"errors\"])) {\n                this.errors = [] as any;\n                for (let item of _data[\"errors\"])\n                    this.errors!.push(ModelError.fromJS(item));\n            }\n            this.validationState = _data[\"validationState\"];\n        }\n    }\n\n    static fromJS(data: any): ModelStateEntry {\n        data = typeof data === 'object' ? data : {};\n        throw new Error(\"The abstract class 'ModelStateEntry' cannot be instantiated.\");\n    }\n\n    toJSON(data?: any) {\n        data = typeof data === 'object' ? data : {};\n        data[\"rawValue\"] = this.rawValue;\n        data[\"attemptedValue\"] = this.attemptedValue;\n        if (Array.isArray(this.errors)) {\n            data[\"errors\"] = [];\n            for (let item of this.errors)\n                data[\"errors\"].push(item.toJSON());\n        }\n        data[\"validationState\"] = this.validationState;\n        return data; \n    }\n}\n\nexport interface IModelStateEntry {\n    rawValue?: any | undefined;\n    attemptedValue?: string | undefined;\n    errors?: ModelError[] | undefined;\n    validationState?: ModelValidationState;\n}\n\nexport class ModelError implements IModelError {\n    exception?: Exception | undefined;\n    errorMessage?: string | undefined;\n\n    constructor(data?: IModelError) {\n        if (data) {\n            for (var property in data) {\n                if (data.hasOwnProperty(property))\n                    (<any>this)[property] = (<any>data)[property];\n            }\n        }\n    }\n\n    init(_data?: any) {\n        if (_data) {\n            this.exception = _data[\"exception\"] ? Exception.fromJS(_data[\"exception\"]) : <any>undefined;\n            this.errorMessage = _data[\"errorMessage\"];\n        }\n    }\n\n    static fromJS(data: any): ModelError {\n        data = typeof data === 'object' ? data : {};\n        let result = new ModelError();\n        result.init(data);\n        return result;\n    }\n\n    toJSON(data?: any) {\n        data = typeof data === 'object' ? data : {};\n        data[\"exception\"] = this.exception ? this.exception.toJSON() : <any>undefined;\n        data[\"errorMessage\"] = this.errorMessage;\n        return data; \n    }\n}\n\nexport interface IModelError {\n    exception?: Exception | undefined;\n    errorMessage?: string | undefined;\n}\n\nexport class Exception implements IException {\n    stackTrace?: string | undefined;\n    message?: string;\n    innerException?: Exception | undefined;\n    source?: string | undefined;\n\n    constructor(data?: IException) {\n        if (data) {\n            for (var property in data) {\n                if (data.hasOwnProperty(property))\n                    (<any>this)[property] = (<any>data)[property];\n            }\n        }\n    }\n\n    init(_data?: any) {\n        if (_data) {\n            this.stackTrace = _data[\"StackTrace\"];\n            this.message = _data[\"Message\"];\n            this.innerException = _data[\"InnerException\"] ? Exception.fromJS(_data[\"InnerException\"]) : <any>undefined;\n            this.source = _data[\"Source\"];\n        }\n    }\n\n    static fromJS(data: any): Exception {\n        data = typeof data === 'object' ? data : {};\n        let result = new Exception();\n        result.init(data);\n        return result;\n    }\n\n    toJSON(data?: any) {\n        data = typeof data === 'object' ? data : {};\n        data[\"StackTrace\"] = this.stackTrace;\n        data[\"Message\"] = this.message;\n        data[\"InnerException\"] = this.innerException ? this.innerException.toJSON() : <any>undefined;\n        data[\"Source\"] = this.source;\n        return data; \n    }\n}\n\nexport interface IException {\n    stackTrace?: string | undefined;\n    message?: string;\n    innerException?: Exception | undefined;\n    source?: string | undefined;\n}\n\nexport enum ModelValidationState {\n    Unvalidated = 0,\n    Invalid = 1,\n    Valid = 2,\n    Skipped = 3,\n}\n\nexport class LogonViewModel implements ILogonViewModel {\n    userName!: string;\n    password!: string;\n\n    constructor(data?: ILogonViewModel) {\n        if (data) {\n            for (var property in data) {\n                if (data.hasOwnProperty(property))\n                    (<any>this)[property] = (<any>data)[property];\n            }\n        }\n    }\n\n    init(_data?: any) {\n        if (_data) {\n            this.userName = _data[\"userName\"];\n            this.password = _data[\"password\"];\n        }\n    }\n\n    static fromJS(data: any): LogonViewModel {\n        data = typeof data === 'object' ? data : {};\n        let result = new LogonViewModel();\n        result.init(data);\n        return result;\n    }\n\n    toJSON(data?: any) {\n        data = typeof data === 'object' ? data : {};\n        data[\"userName\"] = this.userName;\n        data[\"password\"] = this.password;\n        return data; \n    }\n}\n\nexport interface ILogonViewModel {\n    userName: string;\n    password: string;\n}\n\nexport class RegistrationViewModel implements IRegistrationViewModel {\n    email!: string;\n    password!: string;\n    firstName!: string;\n    lastName!: string;\n    location?: string | undefined;\n\n    constructor(data?: IRegistrationViewModel) {\n        if (data) {\n            for (var property in data) {\n                if (data.hasOwnProperty(property))\n                    (<any>this)[property] = (<any>data)[property];\n            }\n        }\n    }\n\n    init(_data?: any) {\n        if (_data) {\n            this.email = _data[\"email\"];\n            this.password = _data[\"password\"];\n            this.firstName = _data[\"firstName\"];\n            this.lastName = _data[\"lastName\"];\n            this.location = _data[\"location\"];\n        }\n    }\n\n    static fromJS(data: any): RegistrationViewModel {\n        data = typeof data === 'object' ? data : {};\n        let result = new RegistrationViewModel();\n        result.init(data);\n        return result;\n    }\n\n    toJSON(data?: any) {\n        data = typeof data === 'object' ? data : {};\n        data[\"email\"] = this.email;\n        data[\"password\"] = this.password;\n        data[\"firstName\"] = this.firstName;\n        data[\"lastName\"] = this.lastName;\n        data[\"location\"] = this.location;\n        return data; \n    }\n}\n\nexport interface IRegistrationViewModel {\n    email: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n    location?: string | undefined;\n}\n\nexport class BaseViewModel implements IBaseViewModel {\n    id?: number;\n\n    constructor(data?: IBaseViewModel) {\n        if (data) {\n            for (var property in data) {\n                if (data.hasOwnProperty(property))\n                    (<any>this)[property] = (<any>data)[property];\n            }\n        }\n    }\n\n    init(_data?: any) {\n        if (_data) {\n            this.id = _data[\"id\"];\n        }\n    }\n\n    static fromJS(data: any): BaseViewModel {\n        data = typeof data === 'object' ? data : {};\n        let result = new BaseViewModel();\n        result.init(data);\n        return result;\n    }\n\n    toJSON(data?: any) {\n        data = typeof data === 'object' ? data : {};\n        data[\"id\"] = this.id;\n        return data; \n    }\n}\n\nexport interface IBaseViewModel {\n    id?: number;\n}\n\nexport class MachineViewModel extends BaseViewModel implements IMachineViewModel {\n    name!: string;\n    location?: string | undefined;\n    startOperation?: Date | undefined;\n    hasDevices?: boolean;\n\n    constructor(data?: IMachineViewModel) {\n        super(data);\n    }\n\n    init(_data?: any) {\n        super.init(_data);\n        if (_data) {\n            this.name = _data[\"name\"];\n            this.location = _data[\"location\"];\n            this.startOperation = _data[\"startOperation\"] ? new Date(_data[\"startOperation\"].toString()) : <any>undefined;\n            this.hasDevices = _data[\"hasDevices\"];\n        }\n    }\n\n    static fromJS(data: any): MachineViewModel {\n        data = typeof data === 'object' ? data : {};\n        let result = new MachineViewModel();\n        result.init(data);\n        return result;\n    }\n\n    toJSON(data?: any) {\n        data = typeof data === 'object' ? data : {};\n        data[\"name\"] = this.name;\n        data[\"location\"] = this.location;\n        data[\"startOperation\"] = this.startOperation ? this.startOperation.toISOString() : <any>undefined;\n        data[\"hasDevices\"] = this.hasDevices;\n        super.toJSON(data);\n        return data; \n    }\n}\n\nexport interface IMachineViewModel extends IBaseViewModel {\n    name: string;\n    location?: string | undefined;\n    startOperation?: Date | undefined;\n    hasDevices?: boolean;\n}\n\nexport class RoleViewModel implements IRoleViewModel {\n    id!: string;\n    name!: string;\n\n    constructor(data?: IRoleViewModel) {\n        if (data) {\n            for (var property in data) {\n                if (data.hasOwnProperty(property))\n                    (<any>this)[property] = (<any>data)[property];\n            }\n        }\n    }\n\n    init(_data?: any) {\n        if (_data) {\n            this.id = _data[\"id\"];\n            this.name = _data[\"name\"];\n        }\n    }\n\n    static fromJS(data: any): RoleViewModel {\n        data = typeof data === 'object' ? data : {};\n        let result = new RoleViewModel();\n        result.init(data);\n        return result;\n    }\n\n    toJSON(data?: any) {\n        data = typeof data === 'object' ? data : {};\n        data[\"id\"] = this.id;\n        data[\"name\"] = this.name;\n        return data; \n    }\n}\n\nexport interface IRoleViewModel {\n    id: string;\n    name: string;\n}\n\nexport class ApiException extends Error {\n    message: string;\n    status: number;\n    response: string;\n    headers: { [key: string]: any; };\n    result: any;\n\n    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {\n        super();\n\n        this.message = message;\n        this.status = status;\n        this.response = response;\n        this.headers = headers;\n        this.result = result;\n    }\n\n    protected isApiException = true;\n\n    static isApiException(obj: any): obj is ApiException {\n        return obj.isApiException === true;\n    }\n}\n\nfunction throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {\n    if (result !== null && result !== undefined)\n        return _observableThrow(result);\n    else\n        return _observableThrow(new ApiException(message, status, response, headers, null));\n}\n\nfunction blobToText(blob: any): Observable<string> {\n    return new Observable<string>((observer: any) => {\n        if (!blob) {\n            observer.next(\"\");\n            observer.complete();\n        } else {\n            let reader = new FileReader();\n            reader.onload = event => {\n                observer.next((<any>event.target).result);\n                observer.complete();\n            };\n            reader.readAsText(blob);\n        }\n    });\n}","import { Injectable } from '@angular/core';\r\nimport { ApiMachines, MachineViewModel } from './lib/frontendapi.services';\r\n\r\ntype chartPoint = Array<{ x: number, y: number, v: number }>;\r\n\r\n@Injectable()\r\nexport class MachineDataService {\r\n\r\n  constructor(private api: ApiMachines) {\r\n  }\r\n\r\n  public async getChartData(): Promise<chartPoint> {\r\n    throw new Error('Not implemented');\r\n  }\r\n\r\n  public getMachines(): Promise<MachineViewModel[]> {\r\n    return this.api.get().toPromise();\r\n  }\r\n\r\n}","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule).catch(err => console.error(err));\r\n"]}