// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JoergIsAGeek.Workshop.Enterprise.WebFrontEnd.ServiceProxy.Authentication
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AuthenticationServiceAPI.
    /// </summary>
    public static partial class AuthenticationServiceAPIExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ApplicationUserDto> ApiAuthServiceUserGet(this IAuthenticationServiceAPI operations)
            {
                return operations.ApiAuthServiceUserGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ApplicationUserDto>> ApiAuthServiceUserGetAsync(this IAuthenticationServiceAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceUserGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            public static IdentityResult ApiAuthServiceUserPut(this IAuthenticationServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto))
            {
                return operations.ApiAuthServiceUserPutAsync(user).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IdentityResult> ApiAuthServiceUserPutAsync(this IAuthenticationServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceUserPutWithHttpMessagesAsync(user, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            public static IdentityResult ApiAuthServiceUserPost(this IAuthenticationServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto))
            {
                return operations.ApiAuthServiceUserPostAsync(user).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IdentityResult> ApiAuthServiceUserPostAsync(this IAuthenticationServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceUserPostWithHttpMessagesAsync(user, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            public static ApplicationUserDto ApiAuthServiceUserFindByIdByUserIdGet(this IAuthenticationServiceAPI operations, string userId)
            {
                return operations.ApiAuthServiceUserFindByIdByUserIdGetAsync(userId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationUserDto> ApiAuthServiceUserFindByIdByUserIdGetAsync(this IAuthenticationServiceAPI operations, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceUserFindByIdByUserIdGetWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='normalizedUserName'>
            /// </param>
            public static ApplicationUserDto ApiAuthServiceUserFindByNameByNormalizedUserNameGet(this IAuthenticationServiceAPI operations, string normalizedUserName)
            {
                return operations.ApiAuthServiceUserFindByNameByNormalizedUserNameGetAsync(normalizedUserName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='normalizedUserName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationUserDto> ApiAuthServiceUserFindByNameByNormalizedUserNameGetAsync(this IAuthenticationServiceAPI operations, string normalizedUserName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceUserFindByNameByNormalizedUserNameGetWithHttpMessagesAsync(normalizedUserName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            public static string ApiAuthServiceUserNormalizedNameGet(this IAuthenticationServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string))
            {
                return operations.ApiAuthServiceUserNormalizedNameGetAsync(id, passwordHash, emailConfirmed, email, userName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiAuthServiceUserNormalizedNameGetAsync(this IAuthenticationServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceUserNormalizedNameGetWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='normalizedName'>
            /// </param>
            public static void ApiAuthServiceUserNormalizedNamePut(this IAuthenticationServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), string normalizedName = default(string))
            {
                operations.ApiAuthServiceUserNormalizedNamePutAsync(user, normalizedName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='normalizedName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceUserNormalizedNamePutAsync(this IAuthenticationServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), string normalizedName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceUserNormalizedNamePutWithHttpMessagesAsync(user, normalizedName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            public static string ApiAuthServiceUserIdGet(this IAuthenticationServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string))
            {
                return operations.ApiAuthServiceUserIdGetAsync(id, passwordHash, emailConfirmed, email, userName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiAuthServiceUserIdGetAsync(this IAuthenticationServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceUserIdGetWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            public static string ApiAuthServiceUserNameGet(this IAuthenticationServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string))
            {
                return operations.ApiAuthServiceUserNameGetAsync(id, passwordHash, emailConfirmed, email, userName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiAuthServiceUserNameGetAsync(this IAuthenticationServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceUserNameGetWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            public static void ApiAuthServiceUserNamePut(this IAuthenticationServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), string userName = default(string))
            {
                operations.ApiAuthServiceUserNamePutAsync(user, userName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceUserNamePutAsync(this IAuthenticationServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), string userName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceUserNamePutWithHttpMessagesAsync(user, userName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            public static string ApiAuthServiceUserPasswordHashGet(this IAuthenticationServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string))
            {
                return operations.ApiAuthServiceUserPasswordHashGetAsync(id, passwordHash, emailConfirmed, email, userName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiAuthServiceUserPasswordHashGetAsync(this IAuthenticationServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceUserPasswordHashGetWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userDto'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            public static void ApiAuthServiceUserPasswordHashPut(this IAuthenticationServiceAPI operations, ApplicationUserDto userDto = default(ApplicationUserDto), string passwordHash = default(string))
            {
                operations.ApiAuthServiceUserPasswordHashPutAsync(userDto, passwordHash).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userDto'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceUserPasswordHashPutAsync(this IAuthenticationServiceAPI operations, ApplicationUserDto userDto = default(ApplicationUserDto), string passwordHash = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceUserPasswordHashPutWithHttpMessagesAsync(userDto, passwordHash, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userDto'>
            /// </param>
            public static bool? ApiAuthServiceUserHasPasswordGet(this IAuthenticationServiceAPI operations, ApplicationUserDto userDto = default(ApplicationUserDto))
            {
                return operations.ApiAuthServiceUserHasPasswordGetAsync(userDto).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userDto'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> ApiAuthServiceUserHasPasswordGetAsync(this IAuthenticationServiceAPI operations, ApplicationUserDto userDto = default(ApplicationUserDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceUserHasPasswordGetWithHttpMessagesAsync(userDto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='normalizedEmail'>
            /// </param>
            public static ApplicationUserDto ApiAuthServiceUserFindByEmailByNormalizedEmailGet(this IAuthenticationServiceAPI operations, string normalizedEmail)
            {
                return operations.ApiAuthServiceUserFindByEmailByNormalizedEmailGetAsync(normalizedEmail).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='normalizedEmail'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationUserDto> ApiAuthServiceUserFindByEmailByNormalizedEmailGetAsync(this IAuthenticationServiceAPI operations, string normalizedEmail, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceUserFindByEmailByNormalizedEmailGetWithHttpMessagesAsync(normalizedEmail, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            public static string ApiAuthServiceUserEmailGet(this IAuthenticationServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string))
            {
                return operations.ApiAuthServiceUserEmailGetAsync(id, passwordHash, emailConfirmed, email, userName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiAuthServiceUserEmailGetAsync(this IAuthenticationServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceUserEmailGetWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='email'>
            /// </param>
            public static void ApiAuthServiceUserEmailPut(this IAuthenticationServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), string email = default(string))
            {
                operations.ApiAuthServiceUserEmailPutAsync(user, email).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceUserEmailPutAsync(this IAuthenticationServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), string email = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceUserEmailPutWithHttpMessagesAsync(user, email, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            public static bool? ApiAuthServiceUserEmailConfirmedGet(this IAuthenticationServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string))
            {
                return operations.ApiAuthServiceUserEmailConfirmedGetAsync(id, passwordHash, emailConfirmed, email, userName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> ApiAuthServiceUserEmailConfirmedGetAsync(this IAuthenticationServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceUserEmailConfirmedGetWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='confirmed'>
            /// </param>
            public static void ApiAuthServiceUserEmailConfirmedPut(this IAuthenticationServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), bool? confirmed = default(bool?))
            {
                operations.ApiAuthServiceUserEmailConfirmedPutAsync(user, confirmed).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='confirmed'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceUserEmailConfirmedPutAsync(this IAuthenticationServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), bool? confirmed = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceUserEmailConfirmedPutWithHttpMessagesAsync(user, confirmed, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            public static string ApiAuthServiceUserNormalizedEmailGet(this IAuthenticationServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string))
            {
                return operations.ApiAuthServiceUserNormalizedEmailGetAsync(id, passwordHash, emailConfirmed, email, userName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiAuthServiceUserNormalizedEmailGetAsync(this IAuthenticationServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceUserNormalizedEmailGetWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='normalizedEmail'>
            /// </param>
            public static void ApiAuthServiceUserNormalizedEmailPut(this IAuthenticationServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), string normalizedEmail = default(string))
            {
                operations.ApiAuthServiceUserNormalizedEmailPutAsync(user, normalizedEmail).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='normalizedEmail'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceUserNormalizedEmailPutAsync(this IAuthenticationServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), string normalizedEmail = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceUserNormalizedEmailPutWithHttpMessagesAsync(user, normalizedEmail, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            public static IList<ClaimDto> ApiAuthServiceClaimsGet(this IAuthenticationServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string))
            {
                return operations.ApiAuthServiceClaimsGetAsync(id, passwordHash, emailConfirmed, email, userName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ClaimDto>> ApiAuthServiceClaimsGetAsync(this IAuthenticationServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceClaimsGetWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='claims'>
            /// </param>
            public static void ApiAuthServiceClaimsPut(this IAuthenticationServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), IList<object> claims = default(IList<object>))
            {
                operations.ApiAuthServiceClaimsPutAsync(id, passwordHash, emailConfirmed, email, userName, claims).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='claims'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceClaimsPutAsync(this IAuthenticationServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), IList<object> claims = default(IList<object>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceClaimsPutWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, claims, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='type'>
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='newType'>
            /// </param>
            /// <param name='newValue'>
            /// </param>
            public static void ApiAuthServiceClaimsPost(this IAuthenticationServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), string type = default(string), string value = default(string), string newType = default(string), string newValue = default(string))
            {
                operations.ApiAuthServiceClaimsPostAsync(id, passwordHash, emailConfirmed, email, userName, type, value, newType, newValue).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='type'>
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='newType'>
            /// </param>
            /// <param name='newValue'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceClaimsPostAsync(this IAuthenticationServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), string type = default(string), string value = default(string), string newType = default(string), string newValue = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceClaimsPostWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, type, value, newType, newValue, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='claims'>
            /// </param>
            public static void ApiAuthServiceClaimsDelete(this IAuthenticationServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), IList<object> claims = default(IList<object>))
            {
                operations.ApiAuthServiceClaimsDeleteAsync(id, passwordHash, emailConfirmed, email, userName, claims).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='claims'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceClaimsDeleteAsync(this IAuthenticationServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), IList<object> claims = default(IList<object>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceClaimsDeleteWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, claims, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='roleName'>
            /// </param>
            public static void ApiAuthServiceRoleAddToRolePut(this IAuthenticationServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), string roleName = default(string))
            {
                operations.ApiAuthServiceRoleAddToRolePutAsync(id, passwordHash, emailConfirmed, email, userName, roleName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='roleName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceRoleAddToRolePutAsync(this IAuthenticationServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), string roleName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceRoleAddToRolePutWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, roleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='roleName'>
            /// </param>
            public static void ApiAuthServiceRoleRemoveFromRoleDelete(this IAuthenticationServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), string roleName = default(string))
            {
                operations.ApiAuthServiceRoleRemoveFromRoleDeleteAsync(id, passwordHash, emailConfirmed, email, userName, roleName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='roleName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceRoleRemoveFromRoleDeleteAsync(this IAuthenticationServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), string roleName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceRoleRemoveFromRoleDeleteWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, roleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            public static IList<string> ApiAuthServiceRoleForUserGet(this IAuthenticationServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string))
            {
                return operations.ApiAuthServiceRoleForUserGetAsync(id, passwordHash, emailConfirmed, email, userName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> ApiAuthServiceRoleForUserGetAsync(this IAuthenticationServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceRoleForUserGetWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='roleName'>
            /// </param>
            public static bool? ApiAuthServiceRoleIsInRoleGet(this IAuthenticationServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), string roleName = default(string))
            {
                return operations.ApiAuthServiceRoleIsInRoleGetAsync(id, passwordHash, emailConfirmed, email, userName, roleName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='roleName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> ApiAuthServiceRoleIsInRoleGetAsync(this IAuthenticationServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), string roleName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceRoleIsInRoleGetWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, roleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleName'>
            /// </param>
            public static IList<ApplicationUserDto> ApiAuthServiceRoleUsersInRoleByRoleNameGet(this IAuthenticationServiceAPI operations, string roleName)
            {
                return operations.ApiAuthServiceRoleUsersInRoleByRoleNameGetAsync(roleName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ApplicationUserDto>> ApiAuthServiceRoleUsersInRoleByRoleNameGetAsync(this IAuthenticationServiceAPI operations, string roleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceRoleUsersInRoleByRoleNameGetWithHttpMessagesAsync(roleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='role'>
            /// </param>
            /// <param name='roleName'>
            /// </param>
            public static void ApiAuthServiceRoleSetIdentityNamePut(this IAuthenticationServiceAPI operations, ApplicationIdentityRoleDto role = default(ApplicationIdentityRoleDto), string roleName = default(string))
            {
                operations.ApiAuthServiceRoleSetIdentityNamePutAsync(role, roleName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='role'>
            /// </param>
            /// <param name='roleName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceRoleSetIdentityNamePutAsync(this IAuthenticationServiceAPI operations, ApplicationIdentityRoleDto role = default(ApplicationIdentityRoleDto), string roleName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceRoleSetIdentityNamePutWithHttpMessagesAsync(role, roleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='role'>
            /// </param>
            /// <param name='normalizedName'>
            /// </param>
            public static void ApiAuthServiceRoleSetNormalizedNamePut(this IAuthenticationServiceAPI operations, ApplicationIdentityRoleDto role = default(ApplicationIdentityRoleDto), string normalizedName = default(string))
            {
                operations.ApiAuthServiceRoleSetNormalizedNamePutAsync(role, normalizedName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='role'>
            /// </param>
            /// <param name='normalizedName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceRoleSetNormalizedNamePutAsync(this IAuthenticationServiceAPI operations, ApplicationIdentityRoleDto role = default(ApplicationIdentityRoleDto), string normalizedName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceRoleSetNormalizedNamePutWithHttpMessagesAsync(role, normalizedName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ApplicationIdentityRoleDto> ApiAuthServiceRoleGet(this IAuthenticationServiceAPI operations)
            {
                return operations.ApiAuthServiceRoleGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ApplicationIdentityRoleDto>> ApiAuthServiceRoleGetAsync(this IAuthenticationServiceAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceRoleGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='role'>
            /// </param>
            public static IdentityResult ApiAuthServiceRolePut(this IAuthenticationServiceAPI operations, ApplicationIdentityRoleDto role = default(ApplicationIdentityRoleDto))
            {
                return operations.ApiAuthServiceRolePutAsync(role).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='role'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IdentityResult> ApiAuthServiceRolePutAsync(this IAuthenticationServiceAPI operations, ApplicationIdentityRoleDto role = default(ApplicationIdentityRoleDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceRolePutWithHttpMessagesAsync(role, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='role'>
            /// </param>
            public static IdentityResult ApiAuthServiceRolePost(this IAuthenticationServiceAPI operations, ApplicationIdentityRoleDto role = default(ApplicationIdentityRoleDto))
            {
                return operations.ApiAuthServiceRolePostAsync(role).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='role'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IdentityResult> ApiAuthServiceRolePostAsync(this IAuthenticationServiceAPI operations, ApplicationIdentityRoleDto role = default(ApplicationIdentityRoleDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceRolePostWithHttpMessagesAsync(role, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='role'>
            /// </param>
            public static IdentityResult ApiAuthServiceRoleIdentityDelete(this IAuthenticationServiceAPI operations, ApplicationIdentityRoleDto role = default(ApplicationIdentityRoleDto))
            {
                return operations.ApiAuthServiceRoleIdentityDeleteAsync(role).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='role'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IdentityResult> ApiAuthServiceRoleIdentityDeleteAsync(this IAuthenticationServiceAPI operations, ApplicationIdentityRoleDto role = default(ApplicationIdentityRoleDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceRoleIdentityDeleteWithHttpMessagesAsync(role, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleId'>
            /// </param>
            public static ApplicationIdentityRoleDto ApiAuthServiceRoleFindByIdGet(this IAuthenticationServiceAPI operations, string roleId = default(string))
            {
                return operations.ApiAuthServiceRoleFindByIdGetAsync(roleId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationIdentityRoleDto> ApiAuthServiceRoleFindByIdGetAsync(this IAuthenticationServiceAPI operations, string roleId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceRoleFindByIdGetWithHttpMessagesAsync(roleId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='normalizedRoleName'>
            /// </param>
            public static ApplicationIdentityRoleDto ApiAuthServiceRoleFindByNameGet(this IAuthenticationServiceAPI operations, string normalizedRoleName = default(string))
            {
                return operations.ApiAuthServiceRoleFindByNameGetAsync(normalizedRoleName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='normalizedRoleName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationIdentityRoleDto> ApiAuthServiceRoleFindByNameGetAsync(this IAuthenticationServiceAPI operations, string normalizedRoleName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceRoleFindByNameGetWithHttpMessagesAsync(normalizedRoleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            public static string ApiAuthServiceRoleIdentityIdGet(this IAuthenticationServiceAPI operations, string id = default(string), string name = default(string))
            {
                return operations.ApiAuthServiceRoleIdentityIdGetAsync(id, name).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiAuthServiceRoleIdentityIdGetAsync(this IAuthenticationServiceAPI operations, string id = default(string), string name = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceRoleIdentityIdGetWithHttpMessagesAsync(id, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            public static string ApiAuthServiceRoleIdentityNameGet(this IAuthenticationServiceAPI operations, string id = default(string), string name = default(string))
            {
                return operations.ApiAuthServiceRoleIdentityNameGetAsync(id, name).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiAuthServiceRoleIdentityNameGetAsync(this IAuthenticationServiceAPI operations, string id = default(string), string name = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceRoleIdentityNameGetWithHttpMessagesAsync(id, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            public static string ApiAuthServiceRoleNormalizedNameGet(this IAuthenticationServiceAPI operations, string id = default(string), string name = default(string))
            {
                return operations.ApiAuthServiceRoleNormalizedNameGetAsync(id, name).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiAuthServiceRoleNormalizedNameGetAsync(this IAuthenticationServiceAPI operations, string id = default(string), string name = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceRoleNormalizedNameGetWithHttpMessagesAsync(id, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
