// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JoergIsAGeek.Workshop.Enterprise.WebFrontEnd.ServiceProxy.MachineData
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MachineServiceAPI.
    /// </summary>
    public static partial class MachineServiceAPIExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<MachineDto> ApiMachineServiceGet(this IMachineServiceAPI operations)
            {
                return operations.ApiMachineServiceGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<MachineDto>> ApiMachineServiceGetAsync(this IMachineServiceAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMachineServiceGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='machine'>
            /// </param>
            public static bool? ApiMachineServicePut(this IMachineServiceAPI operations, MachineDto machine = default(MachineDto))
            {
                return operations.ApiMachineServicePutAsync(machine).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='machine'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> ApiMachineServicePutAsync(this IMachineServiceAPI operations, MachineDto machine = default(MachineDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMachineServicePutWithHttpMessagesAsync(machine, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='machine'>
            /// </param>
            public static bool? ApiMachineServicePost(this IMachineServiceAPI operations, MachineDto machine = default(MachineDto))
            {
                return operations.ApiMachineServicePostAsync(machine).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='machine'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> ApiMachineServicePostAsync(this IMachineServiceAPI operations, MachineDto machine = default(MachineDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMachineServicePostWithHttpMessagesAsync(machine, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static MachineDto ApiMachineServiceByIdGet(this IMachineServiceAPI operations, int id)
            {
                return operations.ApiMachineServiceByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MachineDto> ApiMachineServiceByIdGetAsync(this IMachineServiceAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMachineServiceByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static bool? ApiMachineServiceByIdDelete(this IMachineServiceAPI operations, int id)
            {
                return operations.ApiMachineServiceByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> ApiMachineServiceByIdDeleteAsync(this IMachineServiceAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMachineServiceByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static IList<MachineDto> ApiMachineServiceByValByValueGet(this IMachineServiceAPI operations, double value)
            {
                return operations.ApiMachineServiceByValByValueGetAsync(value).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<MachineDto>> ApiMachineServiceByValByValueGetAsync(this IMachineServiceAPI operations, double value, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMachineServiceByValByValueGetWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
