// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JoergIsAGeek.Workshop.Enterprise.WebFrontEnd.ServiceProxy
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for EnterpriseServiceAPI.
    /// </summary>
    public static partial class EnterpriseServiceAPIExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='role'>
            /// </param>
            public static IdentityResult ApiAuthServiceCreateRolePost(this IEnterpriseServiceAPI operations, ApplicationIdentityRoleDto role = default(ApplicationIdentityRoleDto))
            {
                return operations.ApiAuthServiceCreateRolePostAsync(role).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='role'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IdentityResult> ApiAuthServiceCreateRolePostAsync(this IEnterpriseServiceAPI operations, ApplicationIdentityRoleDto role = default(ApplicationIdentityRoleDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceCreateRolePostWithHttpMessagesAsync(role, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            public static IdentityResult ApiAuthServiceCreateUserPost(this IEnterpriseServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto))
            {
                return operations.ApiAuthServiceCreateUserPostAsync(user).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IdentityResult> ApiAuthServiceCreateUserPostAsync(this IEnterpriseServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceCreateUserPostWithHttpMessagesAsync(user, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='role'>
            /// </param>
            public static IdentityResult ApiAuthServiceDeleteRolePost(this IEnterpriseServiceAPI operations, ApplicationIdentityRoleDto role = default(ApplicationIdentityRoleDto))
            {
                return operations.ApiAuthServiceDeleteRolePostAsync(role).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='role'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IdentityResult> ApiAuthServiceDeleteRolePostAsync(this IEnterpriseServiceAPI operations, ApplicationIdentityRoleDto role = default(ApplicationIdentityRoleDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceDeleteRolePostWithHttpMessagesAsync(role, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleId'>
            /// </param>
            public static ApplicationIdentityRoleDto ApiAuthServiceFindRoleGet(this IEnterpriseServiceAPI operations, string roleId = default(string))
            {
                return operations.ApiAuthServiceFindRoleGetAsync(roleId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationIdentityRoleDto> ApiAuthServiceFindRoleGetAsync(this IEnterpriseServiceAPI operations, string roleId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceFindRoleGetWithHttpMessagesAsync(roleId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='normalizedRoleName'>
            /// </param>
            public static ApplicationIdentityRoleDto ApiAuthServiceFindRoleByNameGet(this IEnterpriseServiceAPI operations, string normalizedRoleName = default(string))
            {
                return operations.ApiAuthServiceFindRoleByNameGetAsync(normalizedRoleName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='normalizedRoleName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationIdentityRoleDto> ApiAuthServiceFindRoleByNameGetAsync(this IEnterpriseServiceAPI operations, string normalizedRoleName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceFindRoleByNameGetWithHttpMessagesAsync(normalizedRoleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            public static ApplicationUserDto ApiAuthServiceFindUserGet(this IEnterpriseServiceAPI operations, string userId = default(string))
            {
                return operations.ApiAuthServiceFindUserGetAsync(userId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationUserDto> ApiAuthServiceFindUserGetAsync(this IEnterpriseServiceAPI operations, string userId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceFindUserGetWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='normalizedUserName'>
            /// </param>
            public static ApplicationUserDto ApiAuthServiceFindUserByNameGet(this IEnterpriseServiceAPI operations, string normalizedUserName = default(string))
            {
                return operations.ApiAuthServiceFindUserByNameGetAsync(normalizedUserName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='normalizedUserName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationUserDto> ApiAuthServiceFindUserByNameGetAsync(this IEnterpriseServiceAPI operations, string normalizedUserName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceFindUserByNameGetWithHttpMessagesAsync(normalizedUserName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            public static string ApiAuthServiceGetIdentityRoleGet(this IEnterpriseServiceAPI operations, string id = default(string), string name = default(string))
            {
                return operations.ApiAuthServiceGetIdentityRoleGetAsync(id, name).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiAuthServiceGetIdentityRoleGetAsync(this IEnterpriseServiceAPI operations, string id = default(string), string name = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceGetIdentityRoleGetWithHttpMessagesAsync(id, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            public static string ApiAuthServiceGetIdentityRoleNameGet(this IEnterpriseServiceAPI operations, string id = default(string), string name = default(string))
            {
                return operations.ApiAuthServiceGetIdentityRoleNameGetAsync(id, name).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiAuthServiceGetIdentityRoleNameGetAsync(this IEnterpriseServiceAPI operations, string id = default(string), string name = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceGetIdentityRoleNameGetWithHttpMessagesAsync(id, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            public static string ApiAuthServiceGetNormalizedRoleGet(this IEnterpriseServiceAPI operations, string id = default(string), string name = default(string))
            {
                return operations.ApiAuthServiceGetNormalizedRoleGetAsync(id, name).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiAuthServiceGetNormalizedRoleGetAsync(this IEnterpriseServiceAPI operations, string id = default(string), string name = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceGetNormalizedRoleGetWithHttpMessagesAsync(id, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            public static string ApiAuthServiceGetNormalizedUserGet(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string))
            {
                return operations.ApiAuthServiceGetNormalizedUserGetAsync(id, passwordHash, emailConfirmed, email, userName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiAuthServiceGetNormalizedUserGetAsync(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceGetNormalizedUserGetWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            public static string ApiAuthServiceGetUserIdGet(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string))
            {
                return operations.ApiAuthServiceGetUserIdGetAsync(id, passwordHash, emailConfirmed, email, userName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiAuthServiceGetUserIdGetAsync(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceGetUserIdGetWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            public static string ApiAuthServiceGetUserNameGet(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string))
            {
                return operations.ApiAuthServiceGetUserNameGetAsync(id, passwordHash, emailConfirmed, email, userName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiAuthServiceGetUserNameGetAsync(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceGetUserNameGetWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='role'>
            /// </param>
            /// <param name='roleName'>
            /// </param>
            public static void ApiAuthServiceSetIdentityRoleNamePut(this IEnterpriseServiceAPI operations, ApplicationIdentityRoleDto role = default(ApplicationIdentityRoleDto), string roleName = default(string))
            {
                operations.ApiAuthServiceSetIdentityRoleNamePutAsync(role, roleName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='role'>
            /// </param>
            /// <param name='roleName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceSetIdentityRoleNamePutAsync(this IEnterpriseServiceAPI operations, ApplicationIdentityRoleDto role = default(ApplicationIdentityRoleDto), string roleName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceSetIdentityRoleNamePutWithHttpMessagesAsync(role, roleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='role'>
            /// </param>
            /// <param name='normalizedName'>
            /// </param>
            public static void ApiAuthServiceSetNormalizedRoleNamePut(this IEnterpriseServiceAPI operations, ApplicationIdentityRoleDto role = default(ApplicationIdentityRoleDto), string normalizedName = default(string))
            {
                operations.ApiAuthServiceSetNormalizedRoleNamePutAsync(role, normalizedName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='role'>
            /// </param>
            /// <param name='normalizedName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceSetNormalizedRoleNamePutAsync(this IEnterpriseServiceAPI operations, ApplicationIdentityRoleDto role = default(ApplicationIdentityRoleDto), string normalizedName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceSetNormalizedRoleNamePutWithHttpMessagesAsync(role, normalizedName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='normalizedName'>
            /// </param>
            public static void ApiAuthServiceSetNormalizedUserNamePut(this IEnterpriseServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), string normalizedName = default(string))
            {
                operations.ApiAuthServiceSetNormalizedUserNamePutAsync(user, normalizedName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='normalizedName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceSetNormalizedUserNamePutAsync(this IEnterpriseServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), string normalizedName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceSetNormalizedUserNamePutWithHttpMessagesAsync(user, normalizedName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            public static void ApiAuthServiceSetUserNamePut(this IEnterpriseServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), string userName = default(string))
            {
                operations.ApiAuthServiceSetUserNamePutAsync(user, userName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceSetUserNamePutAsync(this IEnterpriseServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), string userName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceSetUserNamePutWithHttpMessagesAsync(user, userName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='role'>
            /// </param>
            public static IdentityResult ApiAuthServiceUpdateRolePut(this IEnterpriseServiceAPI operations, ApplicationIdentityRoleDto role = default(ApplicationIdentityRoleDto))
            {
                return operations.ApiAuthServiceUpdateRolePutAsync(role).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='role'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IdentityResult> ApiAuthServiceUpdateRolePutAsync(this IEnterpriseServiceAPI operations, ApplicationIdentityRoleDto role = default(ApplicationIdentityRoleDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceUpdateRolePutWithHttpMessagesAsync(role, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            public static IdentityResult ApiAuthServiceUpdateUserPut(this IEnterpriseServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto))
            {
                return operations.ApiAuthServiceUpdateUserPutAsync(user).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IdentityResult> ApiAuthServiceUpdateUserPutAsync(this IEnterpriseServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceUpdateUserPutWithHttpMessagesAsync(user, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            public static string ApiAuthServiceGetPasswordHashGet(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string))
            {
                return operations.ApiAuthServiceGetPasswordHashGetAsync(id, passwordHash, emailConfirmed, email, userName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiAuthServiceGetPasswordHashGetAsync(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceGetPasswordHashGetWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userDto'>
            /// </param>
            public static bool? ApiAuthServiceGetHasPasswordGet(this IEnterpriseServiceAPI operations, ApplicationUserDto userDto = default(ApplicationUserDto))
            {
                return operations.ApiAuthServiceGetHasPasswordGetAsync(userDto).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userDto'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> ApiAuthServiceGetHasPasswordGetAsync(this IEnterpriseServiceAPI operations, ApplicationUserDto userDto = default(ApplicationUserDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceGetHasPasswordGetWithHttpMessagesAsync(userDto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userDto'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            public static void ApiAuthServiceSetPasswordHashPut(this IEnterpriseServiceAPI operations, ApplicationUserDto userDto = default(ApplicationUserDto), string passwordHash = default(string))
            {
                operations.ApiAuthServiceSetPasswordHashPutAsync(userDto, passwordHash).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userDto'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceSetPasswordHashPutAsync(this IEnterpriseServiceAPI operations, ApplicationUserDto userDto = default(ApplicationUserDto), string passwordHash = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceSetPasswordHashPutWithHttpMessagesAsync(userDto, passwordHash, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='normalizedEmail'>
            /// </param>
            public static ApplicationUserDto ApiAuthServiceFindByEmailGet(this IEnterpriseServiceAPI operations, string normalizedEmail = default(string))
            {
                return operations.ApiAuthServiceFindByEmailGetAsync(normalizedEmail).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='normalizedEmail'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationUserDto> ApiAuthServiceFindByEmailGetAsync(this IEnterpriseServiceAPI operations, string normalizedEmail = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceFindByEmailGetWithHttpMessagesAsync(normalizedEmail, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            public static string ApiAuthServiceGetEmailOfUserGet(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string))
            {
                return operations.ApiAuthServiceGetEmailOfUserGetAsync(id, passwordHash, emailConfirmed, email, userName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiAuthServiceGetEmailOfUserGetAsync(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceGetEmailOfUserGetWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            public static bool? ApiAuthServiceGetEmailConfirmedGet(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string))
            {
                return operations.ApiAuthServiceGetEmailConfirmedGetAsync(id, passwordHash, emailConfirmed, email, userName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> ApiAuthServiceGetEmailConfirmedGetAsync(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceGetEmailConfirmedGetWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            public static string ApiAuthServiceGetNormalizedEmailGet(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string))
            {
                return operations.ApiAuthServiceGetNormalizedEmailGetAsync(id, passwordHash, emailConfirmed, email, userName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiAuthServiceGetNormalizedEmailGetAsync(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceGetNormalizedEmailGetWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='email'>
            /// </param>
            public static void ApiAuthServiceSetEmailPut(this IEnterpriseServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), string email = default(string))
            {
                operations.ApiAuthServiceSetEmailPutAsync(user, email).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceSetEmailPutAsync(this IEnterpriseServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), string email = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceSetEmailPutWithHttpMessagesAsync(user, email, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='confirmed'>
            /// </param>
            public static void ApiAuthServiceSetEmailConfirmedPut(this IEnterpriseServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), bool? confirmed = default(bool?))
            {
                operations.ApiAuthServiceSetEmailConfirmedPutAsync(user, confirmed).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='confirmed'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceSetEmailConfirmedPutAsync(this IEnterpriseServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), bool? confirmed = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceSetEmailConfirmedPutWithHttpMessagesAsync(user, confirmed, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='normalizedEmail'>
            /// </param>
            public static void ApiAuthServiceSetNormalizedEmailPut(this IEnterpriseServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), string normalizedEmail = default(string))
            {
                operations.ApiAuthServiceSetNormalizedEmailPutAsync(user, normalizedEmail).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='normalizedEmail'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceSetNormalizedEmailPutAsync(this IEnterpriseServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), string normalizedEmail = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceSetNormalizedEmailPutWithHttpMessagesAsync(user, normalizedEmail, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='machine'>
            /// </param>
            public static bool? ApiMachineServiceAddPost(this IEnterpriseServiceAPI operations, MachineDto machine = default(MachineDto))
            {
                return operations.ApiMachineServiceAddPostAsync(machine).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='machine'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> ApiMachineServiceAddPostAsync(this IEnterpriseServiceAPI operations, MachineDto machine = default(MachineDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMachineServiceAddPostWithHttpMessagesAsync(machine, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<MachineDto> ApiMachineServiceGetAllGet(this IEnterpriseServiceAPI operations)
            {
                return operations.ApiMachineServiceGetAllGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<MachineDto>> ApiMachineServiceGetAllGetAsync(this IEnterpriseServiceAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMachineServiceGetAllGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static MachineDto ApiMachineServiceGetGet(this IEnterpriseServiceAPI operations, int? id = default(int?))
            {
                return operations.ApiMachineServiceGetGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MachineDto> ApiMachineServiceGetGetAsync(this IEnterpriseServiceAPI operations, int? id = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMachineServiceGetGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static IList<MachineDto> ApiMachineServiceGetByValGet(this IEnterpriseServiceAPI operations, double? value = default(double?))
            {
                return operations.ApiMachineServiceGetByValGetAsync(value).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<MachineDto>> ApiMachineServiceGetByValGetAsync(this IEnterpriseServiceAPI operations, double? value = default(double?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMachineServiceGetByValGetWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
