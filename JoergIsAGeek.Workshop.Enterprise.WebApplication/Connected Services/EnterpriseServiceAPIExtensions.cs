// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JoergIsAGeek.Workshop.Enterprise.WebFrontEnd.ServiceProxy
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for EnterpriseServiceAPI.
    /// </summary>
    public static partial class EnterpriseServiceAPIExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            public static IdentityResult ApiAuthServiceUserPut(this IEnterpriseServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto))
            {
                return operations.ApiAuthServiceUserPutAsync(user).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IdentityResult> ApiAuthServiceUserPutAsync(this IEnterpriseServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceUserPutWithHttpMessagesAsync(user, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            public static IdentityResult ApiAuthServiceUserPost(this IEnterpriseServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto))
            {
                return operations.ApiAuthServiceUserPostAsync(user).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IdentityResult> ApiAuthServiceUserPostAsync(this IEnterpriseServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceUserPostWithHttpMessagesAsync(user, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            public static ApplicationUserDto ApiAuthServiceUserFindByIdGet(this IEnterpriseServiceAPI operations, string userId = default(string))
            {
                return operations.ApiAuthServiceUserFindByIdGetAsync(userId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationUserDto> ApiAuthServiceUserFindByIdGetAsync(this IEnterpriseServiceAPI operations, string userId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceUserFindByIdGetWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='normalizedUserName'>
            /// </param>
            public static ApplicationUserDto ApiAuthServiceUserFindByNameGet(this IEnterpriseServiceAPI operations, string normalizedUserName = default(string))
            {
                return operations.ApiAuthServiceUserFindByNameGetAsync(normalizedUserName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='normalizedUserName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationUserDto> ApiAuthServiceUserFindByNameGetAsync(this IEnterpriseServiceAPI operations, string normalizedUserName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceUserFindByNameGetWithHttpMessagesAsync(normalizedUserName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            public static string ApiAuthServiceUserNormalizedNameGet(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string))
            {
                return operations.ApiAuthServiceUserNormalizedNameGetAsync(id, passwordHash, emailConfirmed, email, userName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiAuthServiceUserNormalizedNameGetAsync(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceUserNormalizedNameGetWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='normalizedName'>
            /// </param>
            public static void ApiAuthServiceUserNormalizedNamePut(this IEnterpriseServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), string normalizedName = default(string))
            {
                operations.ApiAuthServiceUserNormalizedNamePutAsync(user, normalizedName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='normalizedName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceUserNormalizedNamePutAsync(this IEnterpriseServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), string normalizedName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceUserNormalizedNamePutWithHttpMessagesAsync(user, normalizedName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            public static string ApiAuthServiceUserIdGet(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string))
            {
                return operations.ApiAuthServiceUserIdGetAsync(id, passwordHash, emailConfirmed, email, userName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiAuthServiceUserIdGetAsync(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceUserIdGetWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            public static string ApiAuthServiceUserNameGet(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string))
            {
                return operations.ApiAuthServiceUserNameGetAsync(id, passwordHash, emailConfirmed, email, userName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiAuthServiceUserNameGetAsync(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceUserNameGetWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            public static void ApiAuthServiceUserNamePut(this IEnterpriseServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), string userName = default(string))
            {
                operations.ApiAuthServiceUserNamePutAsync(user, userName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceUserNamePutAsync(this IEnterpriseServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), string userName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceUserNamePutWithHttpMessagesAsync(user, userName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            public static string ApiAuthServiceUserPasswordHashGet(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string))
            {
                return operations.ApiAuthServiceUserPasswordHashGetAsync(id, passwordHash, emailConfirmed, email, userName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiAuthServiceUserPasswordHashGetAsync(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceUserPasswordHashGetWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userDto'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            public static void ApiAuthServiceUserPasswordHashPut(this IEnterpriseServiceAPI operations, ApplicationUserDto userDto = default(ApplicationUserDto), string passwordHash = default(string))
            {
                operations.ApiAuthServiceUserPasswordHashPutAsync(userDto, passwordHash).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userDto'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceUserPasswordHashPutAsync(this IEnterpriseServiceAPI operations, ApplicationUserDto userDto = default(ApplicationUserDto), string passwordHash = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceUserPasswordHashPutWithHttpMessagesAsync(userDto, passwordHash, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userDto'>
            /// </param>
            public static bool? ApiAuthServiceUserHasPasswordGet(this IEnterpriseServiceAPI operations, ApplicationUserDto userDto = default(ApplicationUserDto))
            {
                return operations.ApiAuthServiceUserHasPasswordGetAsync(userDto).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userDto'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> ApiAuthServiceUserHasPasswordGetAsync(this IEnterpriseServiceAPI operations, ApplicationUserDto userDto = default(ApplicationUserDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceUserHasPasswordGetWithHttpMessagesAsync(userDto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='normalizedEmail'>
            /// </param>
            public static ApplicationUserDto ApiAuthServiceUserFindByEmailGet(this IEnterpriseServiceAPI operations, string normalizedEmail = default(string))
            {
                return operations.ApiAuthServiceUserFindByEmailGetAsync(normalizedEmail).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='normalizedEmail'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationUserDto> ApiAuthServiceUserFindByEmailGetAsync(this IEnterpriseServiceAPI operations, string normalizedEmail = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceUserFindByEmailGetWithHttpMessagesAsync(normalizedEmail, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            public static string ApiAuthServiceUserEmailGet(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string))
            {
                return operations.ApiAuthServiceUserEmailGetAsync(id, passwordHash, emailConfirmed, email, userName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiAuthServiceUserEmailGetAsync(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceUserEmailGetWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='email'>
            /// </param>
            public static void ApiAuthServiceUserEmailPut(this IEnterpriseServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), string email = default(string))
            {
                operations.ApiAuthServiceUserEmailPutAsync(user, email).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceUserEmailPutAsync(this IEnterpriseServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), string email = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceUserEmailPutWithHttpMessagesAsync(user, email, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            public static bool? ApiAuthServiceUserEmailConfirmedGet(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string))
            {
                return operations.ApiAuthServiceUserEmailConfirmedGetAsync(id, passwordHash, emailConfirmed, email, userName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> ApiAuthServiceUserEmailConfirmedGetAsync(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceUserEmailConfirmedGetWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='confirmed'>
            /// </param>
            public static void ApiAuthServiceUserEmailConfirmedPut(this IEnterpriseServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), bool? confirmed = default(bool?))
            {
                operations.ApiAuthServiceUserEmailConfirmedPutAsync(user, confirmed).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='confirmed'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceUserEmailConfirmedPutAsync(this IEnterpriseServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), bool? confirmed = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceUserEmailConfirmedPutWithHttpMessagesAsync(user, confirmed, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            public static string ApiAuthServiceUserNormalizedEmailGet(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string))
            {
                return operations.ApiAuthServiceUserNormalizedEmailGetAsync(id, passwordHash, emailConfirmed, email, userName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiAuthServiceUserNormalizedEmailGetAsync(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceUserNormalizedEmailGetWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='normalizedEmail'>
            /// </param>
            public static void ApiAuthServiceUserNormalizedEmailPut(this IEnterpriseServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), string normalizedEmail = default(string))
            {
                operations.ApiAuthServiceUserNormalizedEmailPutAsync(user, normalizedEmail).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='normalizedEmail'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceUserNormalizedEmailPutAsync(this IEnterpriseServiceAPI operations, ApplicationUserDto user = default(ApplicationUserDto), string normalizedEmail = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceUserNormalizedEmailPutWithHttpMessagesAsync(user, normalizedEmail, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            public static IList<ClaimDto> ApiAuthServiceClaimsGet(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string))
            {
                return operations.ApiAuthServiceClaimsGetAsync(id, passwordHash, emailConfirmed, email, userName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ClaimDto>> ApiAuthServiceClaimsGetAsync(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceClaimsGetWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='claims'>
            /// </param>
            public static void ApiAuthServiceClaimsPut(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), IList<object> claims = default(IList<object>))
            {
                operations.ApiAuthServiceClaimsPutAsync(id, passwordHash, emailConfirmed, email, userName, claims).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='claims'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceClaimsPutAsync(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), IList<object> claims = default(IList<object>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceClaimsPutWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, claims, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='type'>
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='newType'>
            /// </param>
            /// <param name='newValue'>
            /// </param>
            public static void ApiAuthServiceClaimsPost(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), string type = default(string), string value = default(string), string newType = default(string), string newValue = default(string))
            {
                operations.ApiAuthServiceClaimsPostAsync(id, passwordHash, emailConfirmed, email, userName, type, value, newType, newValue).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='type'>
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='newType'>
            /// </param>
            /// <param name='newValue'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceClaimsPostAsync(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), string type = default(string), string value = default(string), string newType = default(string), string newValue = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceClaimsPostWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, type, value, newType, newValue, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='claims'>
            /// </param>
            public static void ApiAuthServiceClaimsDelete(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), IList<object> claims = default(IList<object>))
            {
                operations.ApiAuthServiceClaimsDeleteAsync(id, passwordHash, emailConfirmed, email, userName, claims).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='claims'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceClaimsDeleteAsync(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), IList<object> claims = default(IList<object>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceClaimsDeleteWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, claims, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='roleName'>
            /// </param>
            public static void ApiAuthServiceRolesAddToRolePut(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), string roleName = default(string))
            {
                operations.ApiAuthServiceRolesAddToRolePutAsync(id, passwordHash, emailConfirmed, email, userName, roleName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='roleName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceRolesAddToRolePutAsync(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), string roleName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceRolesAddToRolePutWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, roleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='roleName'>
            /// </param>
            public static void ApiAuthServiceRolesRemoveFromRoleDelete(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), string roleName = default(string))
            {
                operations.ApiAuthServiceRolesRemoveFromRoleDeleteAsync(id, passwordHash, emailConfirmed, email, userName, roleName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='roleName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceRolesRemoveFromRoleDeleteAsync(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), string roleName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceRolesRemoveFromRoleDeleteWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, roleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            public static IList<string> ApiAuthServiceRolesGet(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string))
            {
                return operations.ApiAuthServiceRolesGetAsync(id, passwordHash, emailConfirmed, email, userName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> ApiAuthServiceRolesGetAsync(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceRolesGetWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='role'>
            /// </param>
            public static IdentityResult ApiAuthServiceRolesPut(this IEnterpriseServiceAPI operations, ApplicationIdentityRoleDto role = default(ApplicationIdentityRoleDto))
            {
                return operations.ApiAuthServiceRolesPutAsync(role).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='role'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IdentityResult> ApiAuthServiceRolesPutAsync(this IEnterpriseServiceAPI operations, ApplicationIdentityRoleDto role = default(ApplicationIdentityRoleDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceRolesPutWithHttpMessagesAsync(role, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='role'>
            /// </param>
            public static IdentityResult ApiAuthServiceRolesPost(this IEnterpriseServiceAPI operations, ApplicationIdentityRoleDto role = default(ApplicationIdentityRoleDto))
            {
                return operations.ApiAuthServiceRolesPostAsync(role).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='role'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IdentityResult> ApiAuthServiceRolesPostAsync(this IEnterpriseServiceAPI operations, ApplicationIdentityRoleDto role = default(ApplicationIdentityRoleDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceRolesPostWithHttpMessagesAsync(role, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='roleName'>
            /// </param>
            public static bool? ApiAuthServiceRolesIsInRoleGet(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), string roleName = default(string))
            {
                return operations.ApiAuthServiceRolesIsInRoleGetAsync(id, passwordHash, emailConfirmed, email, userName, roleName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='passwordHash'>
            /// </param>
            /// <param name='emailConfirmed'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='roleName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> ApiAuthServiceRolesIsInRoleGetAsync(this IEnterpriseServiceAPI operations, string id = default(string), string passwordHash = default(string), bool? emailConfirmed = default(bool?), string email = default(string), string userName = default(string), string roleName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceRolesIsInRoleGetWithHttpMessagesAsync(id, passwordHash, emailConfirmed, email, userName, roleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleName'>
            /// </param>
            public static IList<ApplicationUserDto> ApiAuthServiceRolesUsersInRoleGet(this IEnterpriseServiceAPI operations, string roleName = default(string))
            {
                return operations.ApiAuthServiceRolesUsersInRoleGetAsync(roleName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ApplicationUserDto>> ApiAuthServiceRolesUsersInRoleGetAsync(this IEnterpriseServiceAPI operations, string roleName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceRolesUsersInRoleGetWithHttpMessagesAsync(roleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='role'>
            /// </param>
            /// <param name='roleName'>
            /// </param>
            public static void ApiAuthServiceRolesSetIdentityNamePut(this IEnterpriseServiceAPI operations, ApplicationIdentityRoleDto role = default(ApplicationIdentityRoleDto), string roleName = default(string))
            {
                operations.ApiAuthServiceRolesSetIdentityNamePutAsync(role, roleName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='role'>
            /// </param>
            /// <param name='roleName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceRolesSetIdentityNamePutAsync(this IEnterpriseServiceAPI operations, ApplicationIdentityRoleDto role = default(ApplicationIdentityRoleDto), string roleName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceRolesSetIdentityNamePutWithHttpMessagesAsync(role, roleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='role'>
            /// </param>
            /// <param name='normalizedName'>
            /// </param>
            public static void ApiAuthServiceRolesSetNormalizedNamePut(this IEnterpriseServiceAPI operations, ApplicationIdentityRoleDto role = default(ApplicationIdentityRoleDto), string normalizedName = default(string))
            {
                operations.ApiAuthServiceRolesSetNormalizedNamePutAsync(role, normalizedName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='role'>
            /// </param>
            /// <param name='normalizedName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAuthServiceRolesSetNormalizedNamePutAsync(this IEnterpriseServiceAPI operations, ApplicationIdentityRoleDto role = default(ApplicationIdentityRoleDto), string normalizedName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiAuthServiceRolesSetNormalizedNamePutWithHttpMessagesAsync(role, normalizedName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='role'>
            /// </param>
            public static IdentityResult ApiAuthServiceRolesIdentityDelete(this IEnterpriseServiceAPI operations, ApplicationIdentityRoleDto role = default(ApplicationIdentityRoleDto))
            {
                return operations.ApiAuthServiceRolesIdentityDeleteAsync(role).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='role'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IdentityResult> ApiAuthServiceRolesIdentityDeleteAsync(this IEnterpriseServiceAPI operations, ApplicationIdentityRoleDto role = default(ApplicationIdentityRoleDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceRolesIdentityDeleteWithHttpMessagesAsync(role, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleId'>
            /// </param>
            public static ApplicationIdentityRoleDto ApiAuthServiceRolesFindByIdGet(this IEnterpriseServiceAPI operations, string roleId = default(string))
            {
                return operations.ApiAuthServiceRolesFindByIdGetAsync(roleId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='roleId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationIdentityRoleDto> ApiAuthServiceRolesFindByIdGetAsync(this IEnterpriseServiceAPI operations, string roleId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceRolesFindByIdGetWithHttpMessagesAsync(roleId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='normalizedRoleName'>
            /// </param>
            public static ApplicationIdentityRoleDto ApiAuthServiceRolesFindByNameGet(this IEnterpriseServiceAPI operations, string normalizedRoleName = default(string))
            {
                return operations.ApiAuthServiceRolesFindByNameGetAsync(normalizedRoleName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='normalizedRoleName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationIdentityRoleDto> ApiAuthServiceRolesFindByNameGetAsync(this IEnterpriseServiceAPI operations, string normalizedRoleName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceRolesFindByNameGetWithHttpMessagesAsync(normalizedRoleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            public static string ApiAuthServiceRolesIdentityIdGet(this IEnterpriseServiceAPI operations, string id = default(string), string name = default(string))
            {
                return operations.ApiAuthServiceRolesIdentityIdGetAsync(id, name).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiAuthServiceRolesIdentityIdGetAsync(this IEnterpriseServiceAPI operations, string id = default(string), string name = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceRolesIdentityIdGetWithHttpMessagesAsync(id, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            public static string ApiAuthServiceRolesIdentityNameGet(this IEnterpriseServiceAPI operations, string id = default(string), string name = default(string))
            {
                return operations.ApiAuthServiceRolesIdentityNameGetAsync(id, name).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiAuthServiceRolesIdentityNameGetAsync(this IEnterpriseServiceAPI operations, string id = default(string), string name = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceRolesIdentityNameGetWithHttpMessagesAsync(id, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            public static string ApiAuthServiceRolesNormalizedNameGet(this IEnterpriseServiceAPI operations, string id = default(string), string name = default(string))
            {
                return operations.ApiAuthServiceRolesNormalizedNameGetAsync(id, name).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiAuthServiceRolesNormalizedNameGetAsync(this IEnterpriseServiceAPI operations, string id = default(string), string name = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthServiceRolesNormalizedNameGetWithHttpMessagesAsync(id, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='machine'>
            /// </param>
            public static bool? ApiMachineServiceAddPost(this IEnterpriseServiceAPI operations, MachineDto machine = default(MachineDto))
            {
                return operations.ApiMachineServiceAddPostAsync(machine).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='machine'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> ApiMachineServiceAddPostAsync(this IEnterpriseServiceAPI operations, MachineDto machine = default(MachineDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMachineServiceAddPostWithHttpMessagesAsync(machine, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<MachineDto> ApiMachineServiceGetAllGet(this IEnterpriseServiceAPI operations)
            {
                return operations.ApiMachineServiceGetAllGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<MachineDto>> ApiMachineServiceGetAllGetAsync(this IEnterpriseServiceAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMachineServiceGetAllGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static MachineDto ApiMachineServiceGetGet(this IEnterpriseServiceAPI operations, int? id = default(int?))
            {
                return operations.ApiMachineServiceGetGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MachineDto> ApiMachineServiceGetGetAsync(this IEnterpriseServiceAPI operations, int? id = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMachineServiceGetGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static IList<MachineDto> ApiMachineServiceGetByValGet(this IEnterpriseServiceAPI operations, double? value = default(double?))
            {
                return operations.ApiMachineServiceGetByValGetAsync(value).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<MachineDto>> ApiMachineServiceGetByValGetAsync(this IEnterpriseServiceAPI operations, double? value = default(double?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiMachineServiceGetByValGetWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
